% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/module_tabs_with_filters.R
\name{ui_tabs_with_filters}
\alias{ui_tabs_with_filters}
\title{Add right filter panel into each of the top-level \code{teal_modules} UIs.}
\usage{
ui_tabs_with_filters(id, modules, datasets)
}
\arguments{
\item{id}{(\code{character}) module id to embed it, if provided,
the server function must be called with \code{callModule};
See the vignette for an example. However, \code{\link{ui_teal_with_splash}}
is then preferred to this function.}

\item{modules}{nested list with one list per module with the
following named list elements:
\tabular{ll}{
\cr name \tab string with name shown in menu for the analysis item
\cr server \tab required, shiny server module function, see
\verb{\link[shiny]\{callModule\}} for more information
\cr ui \tab required, shiny ui module function, see
\verb{\link[shiny]\{callModule\}} for more information. Note, due to the app's initialization by teal,
this \code{ui} function is actually part of the \code{server} function of the shiny app which means code which must
be included in the shiny \code{ui} function (such as using \code{htmltools::htmlDependency}) should not be placed here
but should instead be placed in the \code{header} argument to \code{teal::init} as that is included in the shiny \code{ui}
function.
\cr data \tab required, vector with datasets names that are passed
on (filtered) to the server function
\cr options \tab optional, other arguments passed on to the server
function
}}

\item{datasets}{(\code{FilteredData})\cr
object to store filter state and filtered datasets, shared across modules}
}
\value{
A \code{tagList} of The main menu, place holders for filters and
place holders for the teal modules
}
\description{
The \code{\link{ui_nested_tabs}} function returns a nested tabbed UI corresponding
to the nested modules.
This function adds the right filter panel to each main tab.
}
\details{
The right filter panel's filter choices affect the \code{datasets} object. Therefore,
all modules using the same \code{datasets} share the same filters.

This works with nested modules of depth greater than 2, though the filter
panel is inserted at the right of the modules at depth 1 and not at the leaves.
}
\examples{
mods <- teal:::get_dummy_modules()
datasets <- teal:::get_dummy_datasets()
app <- shinyApp(
  ui = function() {
    tagList(
      teal:::include_teal_css_js(),
      textOutput("info"),
      fluidPage( # needed for nice tabs
        ui_tabs_with_filters("dummy", modules = mods, datasets = datasets)
      )
    )
  },
  server = function(input, output, session) {
    active_module <- callModule(srv_tabs_with_filters, "dummy", datasets = datasets, modules = mods)
    output$info <- renderText({
      paste0("The currently active tab name is ", active_module()$label)
    })
  }
)
\dontrun{
runApp(app)
}


# An example with two filter panels in two apps side-by-side
mods <- teal:::get_dummy_modules()
datasets1 <- datasets2 <- teal:::get_dummy_datasets()
app <- shinyApp(
  ui = function() {
    tagList(
      teal:::include_teal_css_js(),
      textOutput("info"),
      fluidPage( # needed for nice tabs
        fluidRow(
          column(6, ui_tabs_with_filters("app1", modules = mods, datasets = datasets1)),
          column(6, ui_tabs_with_filters("app2", modules = mods, datasets = datasets2))
        )
      )
    )
  },
  server = function(input, output, session) {
    active_module1 <- callModule(
      srv_tabs_with_filters, "app1", datasets = datasets1, modules = mods
    )
    active_module2 <- callModule(
      srv_tabs_with_filters, "app2", datasets = datasets2, modules = mods
    )
    output$info <- renderText({
      paste0(
        "The currently active tab names are: ",
        active_module1()$label, ", ", active_module1()$label
      )
    })
  }
)
\dontrun{
runApp(app)
}
}
