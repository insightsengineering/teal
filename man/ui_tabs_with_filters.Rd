% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/module_tabs_with_filters.R
\name{ui_tabs_with_filters}
\alias{ui_tabs_with_filters}
\title{Add right filter panel into each of the top-level \code{teal_modules} UIs.}
\usage{
ui_tabs_with_filters(id, modules, datasets)
}
\arguments{
\item{id}{(\code{character(1)})\cr
module id}

\item{modules}{(\code{teal_modules}) the modules which will be displayed in the teal application.
See \code{\link[=modules]{modules()}} and \code{\link[=module]{module()}} for more details.}

\item{datasets}{(\code{FilteredData})\cr
object to store filter state and filtered datasets, shared across modules. For more
details see \code{\link[teal.slice:FilteredData]{teal.slice::FilteredData}}}
}
\value{
A \code{tagList} of The main menu, place holders for filters and
place holders for the teal modules
}
\description{
The \link{ui_nested_tabs} function returns a nested tabbed UI corresponding
to the nested modules.
This function adds the right filter panel to each main tab.
}
\details{
The right filter panel's filter choices affect the \code{datasets} object. Therefore,
all modules using the same \code{datasets} share the same filters.

This works with nested modules of depth greater than 2, though the filter
panel is inserted at the right of the modules at depth 1 and not at the leaves.
}
\examples{

mods <- teal:::get_dummy_modules()
datasets <- teal:::get_dummy_datasets()

app <- shinyApp(
  ui = function() {
    tagList(
      teal:::include_teal_css_js(),
      textOutput("info"),
      fluidPage( # needed for nice tabs
        ui_tabs_with_filters("dummy", modules = mods, datasets = datasets)
      )
    )
  },
  server = function(input, output, session) {
    active_module <- srv_tabs_with_filters(
      id = "dummy",
      datasets = datasets,
      modules = mods,
      filter = NULL
    )
    output$info <- renderText({
      paste0("The currently active tab name is ", active_module()$label)
    })
  }
)
\dontrun{
runApp(app)
}


# An example with two filter panels in two apps side-by-side
datasets1 <- datasets2 <- datasets
app <- shinyApp(
  ui = function() {
    tagList(
      teal:::include_teal_css_js(),
      textOutput("info"),
      fluidPage( # needed for nice tabs
        fluidRow(
          column(6, teal:::ui_tabs_with_filters("app1", modules = mods, datasets = datasets1)),
          column(6, teal:::ui_tabs_with_filters("app2", modules = mods, datasets = datasets2))
        )
      )
    )
  },
  server = function(input, output, session) {
    active_module1 <- teal:::srv_tabs_with_filters(
      id = "app1",
      datasets = datasets1,
      modules = mods,
      filter = NULL
    )
    active_module2 <- teal:::srv_tabs_with_filters(
      id = "app2",
      datasets = datasets2,
      modules = mods,
      filter = NULL
    )
    output$info <- renderText({
      paste0(
        "The currently active tab names are: ",
        active_module1()$label, ", ", active_module1()$label
      )
    })
  }
)
\dontrun{
runApp(app)
}
}
\keyword{internal}
