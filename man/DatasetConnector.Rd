% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/DatasetConnector.R
\name{DatasetConnector}
\alias{DatasetConnector}
\title{A \code{DatasetConnector} class of objects

Objects of this class store the connection function to fetch a single dataset.
Note that for some specific connection types (e.g. \code{RICE} or \code{SAICE}),
an object of class \code{DataConnection} must be provided.
Data can be pulled via the \code{pull} method and accessed directly
through the \code{dataset} active binding.
Pulled data inherits from the class \code{\link{Dataset}}}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}}
}
\examples{

## ------------------------------------------------
## Method `DatasetConnector$set_ui_input`
## ------------------------------------------------

ds <- dataset_connector("xyz", pull_callable = callable_function(data.frame))
ds$set_ui_input(
  function(ns) {
    list(sliderInput(ns("colA"), "Select value for colA", min = 0, max = 10, value = 3),
         sliderInput(ns("colB"), "Select value for colB", min = 0, max = 10, value = 7))
  }
)
\dontrun{
ds$launch()
}

## ------------------------------------------------
## Method `DatasetConnector$launch`
## ------------------------------------------------

ds <- dataset_connector("xyz", pull_callable = callable_function(data.frame))
ds$set_ui_input(
  function(ns) {
    list(sliderInput(ns("colA"), "Select value for colA", min = 0, max = 10, value = 3),
         sliderInput(ns("colB"), "Select value for colB", min = 0, max = 10, value = 7))
  }
)
\dontrun{
ds$launch()
}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{DatasetConnector$new()}}
\item \href{#method-print}{\code{DatasetConnector$print()}}
\item \href{#method-get_dataname}{\code{DatasetConnector$get_dataname()}}
\item \href{#method-get_datanames}{\code{DatasetConnector$get_datanames()}}
\item \href{#method-get_dataset_label}{\code{DatasetConnector$get_dataset_label()}}
\item \href{#method-get_keys}{\code{DatasetConnector$get_keys()}}
\item \href{#method-get_join_keys}{\code{DatasetConnector$get_join_keys()}}
\item \href{#method-get_code}{\code{DatasetConnector$get_code()}}
\item \href{#method-get_code_class}{\code{DatasetConnector$get_code_class()}}
\item \href{#method-get_pull_args}{\code{DatasetConnector$get_pull_args()}}
\item \href{#method-get_dataset}{\code{DatasetConnector$get_dataset()}}
\item \href{#method-get_error_message}{\code{DatasetConnector$get_error_message()}}
\item \href{#method-get_pull_callable}{\code{DatasetConnector$get_pull_callable()}}
\item \href{#method-get_raw_data}{\code{DatasetConnector$get_raw_data()}}
\item \href{#method-get_var_r6}{\code{DatasetConnector$get_var_r6()}}
\item \href{#method-reassign_datasets_vars}{\code{DatasetConnector$reassign_datasets_vars()}}
\item \href{#method-set_dataset_label}{\code{DatasetConnector$set_dataset_label()}}
\item \href{#method-set_keys}{\code{DatasetConnector$set_keys()}}
\item \href{#method-set_join_keys}{\code{DatasetConnector$set_join_keys()}}
\item \href{#method-mutate_join_keys}{\code{DatasetConnector$mutate_join_keys()}}
\item \href{#method-pull}{\code{DatasetConnector$pull()}}
\item \href{#method-set_args}{\code{DatasetConnector$set_args()}}
\item \href{#method-mutate}{\code{DatasetConnector$mutate()}}
\item \href{#method-is_failed}{\code{DatasetConnector$is_failed()}}
\item \href{#method-is_pulled}{\code{DatasetConnector$is_pulled()}}
\item \href{#method-is_mutate_delayed}{\code{DatasetConnector$is_mutate_delayed()}}
\item \href{#method-check}{\code{DatasetConnector$check()}}
\item \href{#method-set_ui_input}{\code{DatasetConnector$set_ui_input()}}
\item \href{#method-get_ui}{\code{DatasetConnector$get_ui()}}
\item \href{#method-get_server}{\code{DatasetConnector$get_server()}}
\item \href{#method-launch}{\code{DatasetConnector$launch()}}
\item \href{#method-clone}{\code{DatasetConnector$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Create a new \code{DatasetConnector} object. Set the pulling function
\code{CallableFunction} which returns a \code{data.frame} or \code{MultiAssayExperiment},
e.g. by reading from a function or creating it on the fly.
Prints this DatasetConnector.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DatasetConnector$new(
  dataname,
  pull_callable,
  keys = character(0),
  label = character(0),
  code = character(0),
  vars = list()
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dataname}}{(\code{character})\cr
A given name for the dataset it may not contain spaces}

\item{\code{pull_callable}}{(\code{CallableFunction})\cr
function with necessary arguments set to fetch data from connection.}

\item{\code{keys}}{optional, (\code{character})\cr
vector of dataset primary keys column names}

\item{\code{label}}{(\code{character})\cr
Label to describe the dataset.}

\item{\code{code}}{(\code{character})\cr
A character string defining code to modify \code{raw_data} from this dataset. To modify
current dataset code should contain at least one assignment to object defined in \code{dataname}
argument. For example if \code{dataname = ADSL} example code should contain
\verb{ADSL <- <some R code>}. Can't be used simultaneously with \code{script}}

\item{\code{vars}}{(named \code{list})) \cr
In case when this object code depends on other \code{Dataset} object(s) or
other constant value, this/these object(s) should be included as named
element(s) of the list. For example if this object code needs \code{ADSL}
object we should specify \verb{vars = list(ADSL = <adsl object>)}.
It's recommended to include \code{Dataset} or \code{DatasetConnector} objects to
the \code{vars} list to preserve reproducibility. Please note that \code{vars}
are included to this object as local \code{vars} and they cannot be modified
within another dataset.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-print"></a>}}
\if{latex}{\out{\hypertarget{method-print}{}}}
\subsection{Method \code{print()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DatasetConnector$print(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{additional arguments to the printing method}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
invisibly self
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_dataname"></a>}}
\if{latex}{\out{\hypertarget{method-get_dataname}{}}}
\subsection{Method \code{get_dataname()}}{
Get dataname of dataset
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DatasetConnector$get_dataname()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
dataname of the dataset
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_datanames"></a>}}
\if{latex}{\out{\hypertarget{method-get_datanames}{}}}
\subsection{Method \code{get_datanames()}}{
Get dataname of dataset
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DatasetConnector$get_datanames()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{character} dataname of the dataset
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_dataset_label"></a>}}
\if{latex}{\out{\hypertarget{method-get_dataset_label}{}}}
\subsection{Method \code{get_dataset_label()}}{
Get label of dataset
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DatasetConnector$get_dataset_label()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{character} dataset label
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_keys"></a>}}
\if{latex}{\out{\hypertarget{method-get_keys}{}}}
\subsection{Method \code{get_keys()}}{
Get primary keys of dataset
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DatasetConnector$get_keys()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{character} vector with dataset primary keys
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_join_keys"></a>}}
\if{latex}{\out{\hypertarget{method-get_join_keys}{}}}
\subsection{Method \code{get_join_keys()}}{
Get \code{JoinKeys} object with keys used for joining.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DatasetConnector$get_join_keys()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
(\code{JoinKeys})
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_code"></a>}}
\if{latex}{\out{\hypertarget{method-get_code}{}}}
\subsection{Method \code{get_code()}}{
Get code to get data
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DatasetConnector$get_code(deparse = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deparse}}{(\code{logical})\cr
whether return deparsed form of a call}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
optionally deparsed \code{call} object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_code_class"></a>}}
\if{latex}{\out{\hypertarget{method-get_code_class}{}}}
\subsection{Method \code{get_code_class()}}{
Get internal \code{CodeClass} object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DatasetConnector$get_code_class()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\verb{\code{CodeClass}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_pull_args"></a>}}
\if{latex}{\out{\hypertarget{method-get_pull_args}{}}}
\subsection{Method \code{get_pull_args()}}{
Derive the arguments this connector will pull with
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DatasetConnector$get_pull_args()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{list} of pull function fixed arguments
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_dataset"></a>}}
\if{latex}{\out{\hypertarget{method-get_dataset}{}}}
\subsection{Method \code{get_dataset()}}{
Get dataset
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DatasetConnector$get_dataset()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
dataset (\code{Dataset})
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_error_message"></a>}}
\if{latex}{\out{\hypertarget{method-get_error_message}{}}}
\subsection{Method \code{get_error_message()}}{
Get error message from last pull
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DatasetConnector$get_error_message()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{character} object with error message or \code{character(0)} if last
pull was successful.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_pull_callable"></a>}}
\if{latex}{\out{\hypertarget{method-get_pull_callable}{}}}
\subsection{Method \code{get_pull_callable()}}{
Get pull function
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DatasetConnector$get_pull_callable()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{CallableFunction}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_raw_data"></a>}}
\if{latex}{\out{\hypertarget{method-get_raw_data}{}}}
\subsection{Method \code{get_raw_data()}}{
Get raw data from dataset
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DatasetConnector$get_raw_data()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{data.frame} or \code{MultiAssayExperiment} data
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_var_r6"></a>}}
\if{latex}{\out{\hypertarget{method-get_var_r6}{}}}
\subsection{Method \code{get_var_r6()}}{
Get the list of dependencies that are Dataset or DatasetConnector objects
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DatasetConnector$get_var_r6()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{list}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-reassign_datasets_vars"></a>}}
\if{latex}{\out{\hypertarget{method-reassign_datasets_vars}{}}}
\subsection{Method \code{reassign_datasets_vars()}}{
Reassign \code{vars} in this object to keep references up to date after deep clone.
Update is done based on the objects passed in \code{datasets} argument. Reassignment
refers only to the provided \code{datasets}, other \code{vars} remains the same.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DatasetConnector$reassign_datasets_vars(datasets)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{datasets}}{(\verb{named list} of \code{Dataset(s)} or \code{DatasetConnector(s)})\cr
objects with valid pointers.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
NULL invisible
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set_dataset_label"></a>}}
\if{latex}{\out{\hypertarget{method-set_dataset_label}{}}}
\subsection{Method \code{set_dataset_label()}}{
Set label of the \code{dataset} object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DatasetConnector$set_dataset_label(label)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{label}}{(\code{character})\cr
Label to describe the dataset.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
(\code{self}) invisibly for chaining
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set_keys"></a>}}
\if{latex}{\out{\hypertarget{method-set_keys}{}}}
\subsection{Method \code{set_keys()}}{
Set new keys
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DatasetConnector$set_keys(keys)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{keys}}{optional, (\code{character})\cr
vector of dataset primary keys column names}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
(\code{self}) invisibly for chaining.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set_join_keys"></a>}}
\if{latex}{\out{\hypertarget{method-set_join_keys}{}}}
\subsection{Method \code{set_join_keys()}}{
set join_keys for a given dataset and self
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DatasetConnector$set_join_keys(x)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x}}{\code{list} of \code{JoinKeySet} objects (which are created using the \code{join_key} function)
or single \code{JoinKeySet} objects}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
(\code{self}) invisibly for chaining
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-mutate_join_keys"></a>}}
\if{latex}{\out{\hypertarget{method-mutate_join_keys}{}}}
\subsection{Method \code{mutate_join_keys()}}{
mutate the join_keys for a given dataset and self
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DatasetConnector$mutate_join_keys(dataset, val)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dataset}}{(\code{character}) dataset for which join_keys are to be set against self}

\item{\code{val}}{(named \code{character}) column names used to join}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
(\code{self}) invisibly for chaining
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-pull"></a>}}
\if{latex}{\out{\hypertarget{method-pull}{}}}
\subsection{Method \code{pull()}}{
Pull the data

Read or create data using \code{pull_callable} specified in the constructor.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DatasetConnector$pull(args = NULL, try = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{args}}{(\code{NULL} or named \code{list})\cr
additional dynamic arguments for pull function. \code{args} can be omitted if \code{pull_callable}
from constructor already contains all necessary arguments to pull data. One can try
to execute \code{pull_callable} directly by \code{x$pull_callable$run()} or to get code using
\code{x$pull_callable$get_code()}. \code{args} specified in pull are used temporary to get data but
not saved in code.}

\item{\code{try}}{(\code{logical} value)\cr
whether perform function evaluation inside \code{try} clause}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
(\code{self}) if successful.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set_args"></a>}}
\if{latex}{\out{\hypertarget{method-set_args}{}}}
\subsection{Method \code{set_args()}}{
Set arguments to the pulling function
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DatasetConnector$set_args(args)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{args}}{(\code{NULL} or named \code{list}) dynamic arguments to function}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
(\code{self}) invisibly for chaining
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-mutate"></a>}}
\if{latex}{\out{\hypertarget{method-mutate}{}}}
\subsection{Method \code{mutate()}}{
Dispatcher for either eager or delayed mutate methods

Either code or script must be provided, but not both.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DatasetConnector$mutate(code, vars = list())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{code}}{(\code{character})\cr
A character string defining code to modify \code{raw_data} from this dataset. To modify
current dataset code should contain at least one assignment to object defined in \code{dataname}
argument. For example if \code{dataname = ADSL} example code should contain
\verb{ADSL <- <some R code>}. Can't be used simultaneously with \code{script}}

\item{\code{vars}}{(named \code{list})) \cr
In case when this object code depends on other \code{Dataset} object(s) or
other constant value, this/these object(s) should be included as named
element(s) of the list. For example if this object code needs \code{ADSL}
object we should specify \verb{vars = list(ADSL = <adsl object>)}.
It's recommended to include \code{Dataset} or \code{DatasetConnector} objects to
the \code{vars} list to preserve reproducibility. Please note that \code{vars}
are included to this object as local \code{vars} and they cannot be modified
within another dataset.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
(\code{self}) invisibly for chaining.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-is_failed"></a>}}
\if{latex}{\out{\hypertarget{method-is_failed}{}}}
\subsection{Method \code{is_failed()}}{
Check if pull has not failed.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DatasetConnector$is_failed()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{TRUE} if pull failed, else \code{FALSE}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-is_pulled"></a>}}
\if{latex}{\out{\hypertarget{method-is_pulled}{}}}
\subsection{Method \code{is_pulled()}}{
Check if dataset has already been pulled.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DatasetConnector$is_pulled()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{TRUE} if connector has been already pulled, else \code{FALSE}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-is_mutate_delayed"></a>}}
\if{latex}{\out{\hypertarget{method-is_mutate_delayed}{}}}
\subsection{Method \code{is_mutate_delayed()}}{
Check if dataset has mutations that are delayed
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DatasetConnector$is_mutate_delayed()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{logical}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-check"></a>}}
\if{latex}{\out{\hypertarget{method-check}{}}}
\subsection{Method \code{check()}}{
Check to determine if the raw data is reproducible from the
\code{get_code()} code.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DatasetConnector$check()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{TRUE} always for all connectors to avoid evaluating the same code multiple times.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set_ui_input"></a>}}
\if{latex}{\out{\hypertarget{method-set_ui_input}{}}}
\subsection{Method \code{set_ui_input()}}{
Sets the shiny UI according to the given inputs.
Inputs must provide only scalar (length of 1) variables.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DatasetConnector$set_ui_input(inputs = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{inputs}}{(\code{function}) A shiny module UI function with single argument \code{ns}.
This function needs to return a list of shiny inputs with their \code{inputId} wrapped
in function \code{ns}. The \code{inputId} must match exactly the argument name to be set.
See example.
Nested lists are not allowed.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
(\code{self}) invisibly for chaining.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{ds <- dataset_connector("xyz", pull_callable = callable_function(data.frame))
ds$set_ui_input(
  function(ns) {
    list(sliderInput(ns("colA"), "Select value for colA", min = 0, max = 10, value = 3),
         sliderInput(ns("colB"), "Select value for colB", min = 0, max = 10, value = 7))
  }
)
\dontrun{
ds$launch()
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_ui"></a>}}
\if{latex}{\out{\hypertarget{method-get_ui}{}}}
\subsection{Method \code{get_ui()}}{
Get shiny ui function
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DatasetConnector$get_ui(id)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{(\code{character}) namespace id}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
shiny UI in given namespace id
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_server"></a>}}
\if{latex}{\out{\hypertarget{method-get_server}{}}}
\subsection{Method \code{get_server()}}{
Get shiny server function
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DatasetConnector$get_server()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
shiny server function
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-launch"></a>}}
\if{latex}{\out{\hypertarget{method-launch}{}}}
\subsection{Method \code{launch()}}{
Launches a shiny app.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DatasetConnector$launch()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
Shiny app
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{ds <- dataset_connector("xyz", pull_callable = callable_function(data.frame))
ds$set_ui_input(
  function(ns) {
    list(sliderInput(ns("colA"), "Select value for colA", min = 0, max = 10, value = 3),
         sliderInput(ns("colB"), "Select value for colB", min = 0, max = 10, value = 7))
  }
)
\dontrun{
ds$launch()
}
}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DatasetConnector$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
