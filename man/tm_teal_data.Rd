% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/data-module.R
\name{tm_teal_data}
\alias{tm_teal_data}
\title{DDL object}
\usage{
tm_teal_data(
  label = "data",
  expr,
  code,
  input_mask = list(),
  ui = submit_button_ui,
  server = submit_button_server
)
}
\arguments{
\item{expr}{(optional \code{expression})\cr
Syntactically valid R expression to be executed in the shiny session.
Shouldn't be specified when \code{code} is specified.}

\item{code}{(optional \code{character} or \code{language})\cr
Object containing (defused) syntactically valid R expression to be executed in the shiny session.
Shouldn't be specified when \code{expr} is specified.}

\item{input_mask}{(optional \verb{named list})\cr
arguments to be substituted in the \code{code}. These (named) list elements are going to replace
symbols in the code prefixed with \verb{input$} or \verb{input[["}. Typically \code{input_mask} is used
to mask username or password with \code{list(password = quote(askpass::askpass()))}.
See section \verb{code masking} for more details.}

\item{ui}{(\code{shiny.tag})\cr
\code{shiny} user-interface module containing inputs whose \code{id} correspond to the arguments in the \code{code}.}

\item{server}{(\code{function})\cr
\code{shiny} server module \code{\link[teal.data:teal_data-class]{teal.data::teal_data}} possibly wrapped in a \code{\link[=reactive]{reactive()}}.
\code{server} function should have \code{id} and \code{...} as formals. Where:
\itemize{
\item \code{id} is a \code{shiny} module id, and
\item \code{...} passes arguments from the \code{ddl} object (\code{code}, \code{input_mask}, \code{datanames}, \code{join_keys}).
See section \verb{Code masking}.
}}

\item{datanames}{(optional \code{character})\cr
Names of the datasets created by evaluation of the \code{code}. By default, \code{datanames}
are obtained from the \code{join_keys} or from results of the \code{code} evaluation.
If \code{code} evaluation creates objects which are not considered as datasets, they
should be omitted from \code{datanames} to avoid errors.}
}
\description{
Object to execute custom DDL code in the shiny session.
}
\section{Creating reproducible data}{

\code{ddl} object can be used to create reproducible data in the shiny session. \code{ddl$server} function
can execute any R code and return \code{\link[teal.data:teal_data-class]{teal.data::teal_data}}. For reproducibility purposes,
we recommend to initialize empty \code{teal_data} object and evaluate necessary code with \code{eval_code} or \code{within}.

\if{html}{\out{<div class="sourceCode r">}}\preformatted{function(id, ...) \{
  moduleServer(id, function(input, output, session) \{
    eventReactive(input$submit, \{
      data <- teal_data() |> within(\{
        # code to be run when app user presses submit
      \})
    \})
  \})
\}
}\if{html}{\out{</div>}}

Obtained data is passed further in the \code{teal} app with \code{code} which can be used to recreate the objects.
}

\section{Code masking}{

\code{ddl} object can be used in a way that evaluated code is different than the code
returned in \code{teal_data} object. Typically occurs when app user is asked to input a
password and we'd like to skip this input in the reproducible code. Possibly, users password
could be substituted with \code{askpass::askpass()} call, so the returned code is still executable but secure.
\code{ddl} developer must understand that this is a security risk and should be handled with care.
To make sure that the code is reproducible, \code{ddl} object should be used with \code{input_mask} argument.
\code{teal} provides convenience function \code{\link[=eval_and_mask]{eval_and_mask()}} which handles evaluation of the code, masking
and creating \code{teal_data} object. Such \code{server} function could look like this:

\if{html}{\out{<div class="sourceCode">}}\preformatted{server = function(id, ...) \{
  moduleServer(id, function(input, output, session) \{
    reactive(\{
     eval_and_mask(input = input, ...)
    \})
  \})
\}
}\if{html}{\out{</div>}}

If \code{ddl} developer values more control, then might be interested in using \code{...} explicitly,
and create \code{teal_data} object manually.
}

