% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/filter_spec.R
\name{filter_spec}
\alias{filter_spec}
\title{Data extract filter specification}
\usage{
filter_spec(
  vars,
  choices = NULL,
  selected = if (is(choices, "delayed_data")) NULL else choices[1],
  multiple = length(selected) > 1 || is(selected, "all_choices"),
  label = NULL,
  sep = if_null(attr(choices, "sep"), " - "),
  drop_keys = FALSE
)
}
\arguments{
\item{vars}{(\code{character}) or (\code{delayed_data}) object.
Character vector giving the columns to be filtered. These should be
key variables of the data set to be filtered.
\code{delayed_data} objects can be created via \code{\link{variable_choices}}, \code{\link{value_choices}},
or \code{\link{choices_selected}}.}

\item{choices}{(\code{character} or \code{numeric} or \code{logical} or (\code{delayed_data}) object.
Named character vector to define the choices
of a shiny \code{\link[shiny]{selectInput}}. These choices will be used to filter the
dataset.

These shall be filter values of the \code{vars} input separated by the separator(\code{sep}). Please
watch out that the filter values have to follow the order of the \code{vars} input. In the following
example we will show how to filter two columns:

\code{vars = c("PARAMCD","AVISIT")} and \code{choices = c("CRP - BASELINE", "ALT - BASELINE")}
will lead to a filtering of
\code{(PARAMCD == "CRP" & AVISIT == "BASELINE") | (PARAMCD == "ALT" & AVISIT == "BASELINE")}.

The \code{sep} input has to be \code{" - "} in this case.

\code{delayed_data} objects can be created via \code{\link{variable_choices}} or \code{\link{value_choices}}.}

\item{selected}{(\code{character} or \code{numeric} or \code{logical} or
(\code{delayed_data} or (\code{all_choices})) object.
Named character vector to define the selected
values of a shiny \code{\link[shiny]{selectInput}} (default values). This value will
be displayed inside the shiny app upon start. The \code{all_choices} object indicates selecting
all possible choices.}

\item{multiple}{(\code{logical}) Whether multiple values shall be allowed in the
shiny \code{\link[shiny]{selectInput}}.}

\item{label}{optional (\code{character}). Define a label
on top of this specific shiny \code{\link[shiny]{selectInput}}.}

\item{sep}{(\code{character}) A separator string to split the \code{choices} or
\code{selected} inputs into the values of the different columns}

\item{drop_keys}{optional, (\code{logical}) whether to drop filter column from the dataset keys,
\code{TRUE} on default}
}
\value{
\code{filter_spec}-S3-class object or \code{delayed_filter_spec}-S3-class object.
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#maturing}{\figure{lifecycle-maturing.svg}{options: alt='[Maturing]'}}}{\strong{[Maturing]}}
It consists in choices and additionally the variable names for the choices
}
\details{
The \code{filter_spec} is used inside \code{teal} apps to allow filtering datasets
for their key variables. Imagine having an adverse events table. It has
the columns \code{PARAMCD} and \code{CNSR}. \code{PARAMCD} contains the levels
\code{"OS"}, \code{"PFS"}, \code{"EFS"}. \code{CNSR} contains the levels \code{"0"} and \code{"1"}.
The following examples should show how a \code{filter_spec} setup will influence
the drop-down menu the app user will see:

\enumerate{
\item{Filtering two variables }{
\preformatted{
     filter_spec(
       vars = c("PARAMCD", "CNSR"),
       sep = "-",
       choices = c("OS-1" = "OS-1", "OS-0" = "OS-0", "PFS-1" = "PFS-1"),
       selected = "OS-1",
       multiple = FALSE,
       label = "Choose endpoint and Censor"
     )
   }

\if{html}{
     \figure{filter_spec_1.png}{options: alt="Filtering two variables"}
   }
\if{html}{
     \figure{filter_spec_11.png}{options: alt="Filtering two variables"}
   }
}

\item{Filtering a single variable }{
\preformatted{
     filter_spec(
       vars = c("PARAMCD"),
       sep = "-",
       choices = c("OS", "PFS", "EFS"),
       selected = "OS",
       multiple = FALSE,
       label = "Choose endpoint"
     )
   }

\if{html}{
     \figure{filter_spec_2.png}{options: alt="Filtering two variables"}
   }
\if{html}{
     \figure{filter_spec_21.png}{options: alt="Filtering two variables"}
   }
}

\item{Filtering a single variable by multiple levels of the variable}{
\preformatted{
     filter_spec(
       vars = c("PARAMCD"),
       sep = "-",
       choices = c("OS", "PFS", "EFS"),
       selected = c("OS", "PFS"),
       multiple = TRUE,
       label = "Choose endpoint"
     )
   }

\if{html}{
     \figure{filter_spec_3.png}{options: alt="Filtering two variables"}
   }
\if{html}{
     \figure{filter_spec_31.png}{options: alt="Filtering two variables"}
   }
}
\item{Delayed version}{
\preformatted{
      adsl_filter <- filter_spec(
        vars = variable_choices("ADSL", "SEX"),
        sep = "-",
        choices = value_choices("ADSL", "SEX", "SEX"),
        selected = "F",
        multiple = FALSE,
        label = "Choose endpoint and Censor"
      )
    }
}
\item{The version with \code{choices_selected}
\preformatted{
      adsl_filter <- filter_spec(
        vars = choices_selected("ADSL", "SEX", fixed = FALSE),
        multiple = TRUE
      )

      adsl_filter2 <- filter_spec(
        vars = choices_selected("ADSL", "SEX", fixed = TRUE),
        multiple = TRUE
      )
    }
}
\item{Choose all choices
\preformatted{
      adsl_filter <- filter_spec(
        vars = choices_selected("ADSL", "SEX", fixed = FALSE),
        choices = value_choices("ADSL", "SEX"),
        selected = all_choices()
      )
    }
}
}
}
\examples{
filter_spec(
  vars = c("PARAMCD", "AVISIT"),
  sep = " - ",
  choices = c("CRP - BASELINE", "CRP - SCREENING", "ALT - BASELINE"),
  selected = c("CRP - BASELINE"),
  multiple = TRUE
)

filter_spec(
  vars = c("PARAMCD"),
  sep = " - ",
  choices = c("CRP", "ALT"),
  selected = c("CRP"),
  multiple = TRUE
)
filter_spec(
  vars = variable_choices("ADSL", "ARMCD"),
  choices = value_choices("ADSL",
    var_choices = "ARMCD", var_label = "ARM",
    subset = function(data) {
      levels(data$ARMCD)[1:2]
    }
  ),
  selected = value_choices("ADSL",
    var_choices = "ARMCD", var_label = "ARM",
    subset = function(data) {
      levels(data$ARMCD)[1]
    }
  )
)
}
