% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/select_spec.R
\name{select_spec}
\alias{select_spec}
\alias{select_spec.delayed_data}
\alias{select_spec.default}
\title{Column selection input specification}
\usage{
select_spec(
  choices,
  selected = if (is(choices, "delayed_data")) NULL else choices[1],
  multiple = length(selected) > 1 || is(selected, "all_choices"),
  fixed = FALSE,
  always_selected = NULL,
  ordered = FALSE,
  label = "Select"
)

select_spec.delayed_data(
  choices,
  selected = NULL,
  multiple = length(selected) > 1,
  fixed = FALSE,
  always_selected = NULL,
  ordered = FALSE,
  label = NULL
)

select_spec.default(
  choices,
  selected = choices[1],
  multiple = length(selected) > 1,
  fixed = FALSE,
  always_selected = NULL,
  ordered = FALSE,
  label = NULL
)
}
\arguments{
\item{choices}{(\code{character}) or (\code{delayed_data}) object.
Named character vector to define the choices
of a shiny \code{\link[shiny]{selectInput}}. These have to be columns in the
dataset defined in the \code{\link{data_extract_spec}} where this is called.
\code{delayed_data} objects can be created via \code{\link{variable_choices}} or \code{\link{value_choices}}.}

\item{selected}{optional (\code{character} or \code{NULL} or \code{all_choices} or \code{delayed_data} object).
Named character vector to define the selected values of a shiny \code{\link[shiny]{selectInput}}.
Passing an \code{all_choices()} object indicates selecting all possible choices.
Defaults to the first value of \code{choices} or \code{NULL} for delayed data loading.}

\item{multiple}{(\code{logical}) Whether multiple values shall be allowed in the
shiny \code{\link[shiny]{selectInput}}.}

\item{fixed}{optional (\code{logical}). \code{\link{data_extract_spec}} specific feature to
hide the choices selected in case they are not needed. Setting fixed to \code{TRUE}
will not allow the user to select columns. It will then lead to a selection of
columns in the dataset that is defined by the developer of the app.}

\item{always_selected}{(\code{character}) Additional column names from the data set that should
always be selected}

\item{ordered}{(\code{logical(1)}) Flags whether selection order should be tracked.}

\item{label}{optional (\code{character}). Define a label on top of this specific
shiny \code{\link[shiny]{selectInput}}. The default value is \code{"Select"}.}
}
\value{
A \code{select_spec}-S3 class object or \code{delayed_select_spec}-S3-class object.
It contains all input values.
If \code{select_spec}, then the function double checks the \code{choices} and \code{selected} inputs.
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#stable}{\figure{lifecycle-stable.svg}{options: alt='[Stable]'}}}{\strong{[Stable]}}
\code{select_spec} is used inside teal to create a \code{\link[shiny]{selectInput}}
that will select columns from a dataset.
}
\details{
To give you some more insights into this function there are several examples. These all
start by a data set containing the columns \code{"AGE"}, \code{"AVAL"} and \code{"BMRKR1"}.

\enumerate{
\item{Selection with just one column allowed }{
\preformatted{
select = select_spec(
  choices = c("AVAL", "BMRKR1", "AGE"),
  selected = c("AVAL"),
  multiple = FALSE,
  fixed = FALSE,
  label = "Column"
)
    }
\if{html}{
      \figure{select_spec_1.png}{options: alt="Selection with just one column allowed"}
    }
\if{html}{
      \figure{select_spec_11.png}{options: alt="Selection with just one column allowed"}
    }
}
\item{Selection with just multiple columns allowed }{
\preformatted{
select = select_spec(
  choices = c("AVAL", "BMRKR1", "AGE"),
  selected = c("AVAL", "BMRKR1"),
  multiple = TRUE,
  fixed = FALSE,
  label = "Columns"
)
    }
\if{html}{
      \figure{select_spec_2.png}{options: alt="Selection with just multiple columns allowed"}
    }
\if{html}{
      \figure{select_spec_21.png}{options: alt="Selection with just multiple columns allowed"}
    }
}
\item{Selection without user access }{
\preformatted{
select = select_spec(
  choices = c("AVAL", "BMRKR1"),
  selected = c("AVAL", "BMRKR1"),
  multiple = TRUE,
  fixed = TRUE,
  label = "Columns"
)
    }
\if{html}{
      \figure{select_spec_3.png}{options: alt="Selection without user access"}
    }
}
\item{Delayed version}{
\preformatted{
      adsl_select <- select_spec(
        label = "Select variable:",
        choices = variable_choices("ADSL", c("BMRKR1", "BMRKR2")),
        selected = "BMRKR1",
        multiple = FALSE,
        fixed = FALSE
      )
    }
}
\item{all_choices passed to selected}{
\preformatted{
      adsl_select <- select_spec(
        label = "Select variable:",
        choices = variable_choices("ADSL", c("BMRKR1", "BMRKR2")),
        selected = all_choices()
      )
    }
}
}
}
\examples{
# functional form (subsetting for factor variables only) of select_spec with delayed data loading
select_spec(
  choices = variable_choices("ADSL", subset = function(data) {
    idx <- vapply(data, is.factor, logical(1))
    return(names(data)[idx])
  }),
  # setting first factor variable as default
  selected = variable_choices("ADSL", subset = function(data) {
    idx <- vapply(data, is.factor, logical(1))
    return(names(data)[idx][1])
  }),
  multiple = TRUE
)

# Both below objects are semantically the same
select_spec(choices = variable_choices("ADSL"), selected = variable_choices("ADSL"))
select_spec(choices = variable_choices("ADSL"), selected = all_choices())
}
