% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/DataAbstract.R
\name{DataAbstract}
\alias{DataAbstract}
\title{\code{DataAbstract} class}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}}

Abstract class containing code for handling set of datasets.
}
\section{Public fields}{
\if{html}{\out{<div class="r6-fields">}}
\describe{
\item{\code{id}}{String used to create unique GUI elements}
}
\if{html}{\out{</div>}}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{DataAbstract$new()}}
\item \href{#method-check}{\code{DataAbstract$check()}}
\item \href{#method-check_reproducibility}{\code{DataAbstract$check_reproducibility()}}
\item \href{#method-execute_mutate}{\code{DataAbstract$execute_mutate()}}
\item \href{#method-get_check_result}{\code{DataAbstract$get_check_result()}}
\item \href{#method-get_code}{\code{DataAbstract$get_code()}}
\item \href{#method-get_code_class}{\code{DataAbstract$get_code_class()}}
\item \href{#method-get_datanames}{\code{DataAbstract$get_datanames()}}
\item \href{#method-get_dataset}{\code{DataAbstract$get_dataset()}}
\item \href{#method-get_datasets}{\code{DataAbstract$get_datasets()}}
\item \href{#method-get_items}{\code{DataAbstract$get_items()}}
\item \href{#method-is_pulled}{\code{DataAbstract$is_pulled()}}
\item \href{#method-mutate}{\code{DataAbstract$mutate()}}
\item \href{#method-mutate_dataset}{\code{DataAbstract$mutate_dataset()}}
\item \href{#method-set_check}{\code{DataAbstract$set_check()}}
\item \href{#method-set_pull_code}{\code{DataAbstract$set_pull_code()}}
\item \href{#method-clone}{\code{DataAbstract$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Cannot create a \code{DataAbstract} object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataAbstract$new()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
throws error
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-check"></a>}}
\if{latex}{\out{\hypertarget{method-check}{}}}
\subsection{Method \code{check()}}{
Check if the object raw data is reproducible from the \code{get_code()} code.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataAbstract$check()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{NULL} if check step has been disabled
\code{TRUE} if all the datasets generated from evaluating the
\code{get_code()} code are identical to the raw data, else \code{FALSE}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-check_reproducibility"></a>}}
\if{latex}{\out{\hypertarget{method-check_reproducibility}{}}}
\subsection{Method \code{check_reproducibility()}}{
Execute \code{check} and raise an error if it's not reproducible.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataAbstract$check_reproducibility()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
error if code is not reproducible else invisibly nothing
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-execute_mutate"></a>}}
\if{latex}{\out{\hypertarget{method-execute_mutate}{}}}
\subsection{Method \code{execute_mutate()}}{
Execute mutate code. Using \code{mutate_data(set).DataAbstract}
does not cause instant execution, the \code{mutate_code} is
delayed and can be evaluated using this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataAbstract$execute_mutate()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_check_result"></a>}}
\if{latex}{\out{\hypertarget{method-get_check_result}{}}}
\subsection{Method \code{get_check_result()}}{
Get result of reproducibility check
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataAbstract$get_check_result()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{NULL} if check has not been called yet, \code{TRUE} / \code{FALSE} otherwise
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_code"></a>}}
\if{latex}{\out{\hypertarget{method-get_code}{}}}
\subsection{Method \code{get_code()}}{
Get code for all datasets.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataAbstract$get_code(dataname = NULL, deparse = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dataname}}{(\code{character}) dataname or \code{NULL} for all datasets}

\item{\code{deparse}}{(\code{logical}) whether to return the deparsed form of a call}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
(\code{character}) vector of code to generate datasets.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_code_class"></a>}}
\if{latex}{\out{\hypertarget{method-get_code_class}{}}}
\subsection{Method \code{get_code_class()}}{
Get internal \code{CodeClass} object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataAbstract$get_code_class(only_pull = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{only_pull}}{(\code{logical} value)\cr
if \code{TRUE} only code to pull datasets will be returned without mutate code.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\verb{\code{CodeClass}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_datanames"></a>}}
\if{latex}{\out{\hypertarget{method-get_datanames}{}}}
\subsection{Method \code{get_datanames()}}{
Get names of the datasets.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataAbstract$get_datanames()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{character} vector with names of all datasets.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_dataset"></a>}}
\if{latex}{\out{\hypertarget{method-get_dataset}{}}}
\subsection{Method \code{get_dataset()}}{
Get \code{Dataset} object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataAbstract$get_dataset(dataname = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dataname}}{(\code{character} value)\cr
name of dataset to be returned. If \code{NULL}, all datasets are returned.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{Dataset}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_datasets"></a>}}
\if{latex}{\out{\hypertarget{method-get_datasets}{}}}
\subsection{Method \code{get_datasets()}}{
Get \code{list} of \code{Dataset} objects.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataAbstract$get_datasets()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{list} of \code{Dataset}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_items"></a>}}
\if{latex}{\out{\hypertarget{method-get_items}{}}}
\subsection{Method \code{get_items()}}{
Get all datasets and all dataset connectors
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataAbstract$get_items(dataname = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dataname}}{(\code{character} value)\cr
name of dataset connector to be returned. If \code{NULL}, all connectors are returned.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{list} with all datasets and all connectors
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-is_pulled"></a>}}
\if{latex}{\out{\hypertarget{method-is_pulled}{}}}
\subsection{Method \code{is_pulled()}}{
Check if dataset has already been pulled.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataAbstract$is_pulled()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{TRUE} if dataset has been already pulled, else \code{FALSE}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-mutate"></a>}}
\if{latex}{\out{\hypertarget{method-mutate}{}}}
\subsection{Method \code{mutate()}}{
Mutate data by code. Code used in this mutation is not linked to particular
but refers to all datasets.
Consequence of this is that when using \code{get_code(<dataset>)} this
part of the code will be returned for each specified dataset. This method
should be used only if particular call involve changing multiple datasets.
Otherwise please use \code{mutate_dataset}.
Execution of \code{mutate_code} is delayed after datasets are pulled
(\code{isTRUE(is_pulled)}).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataAbstract$mutate(code, vars = list())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{code}}{(\code{character}) Code to mutate the dataset. Must contain the
\code{dataset$dataname}}

\item{\code{vars}}{(named \code{list})) \cr
In case when this object code depends on other \code{Dataset} object(s) or
other constant value, this/these object(s) should be included as named
element(s) of the list. For example if this object code needs \code{ADSL}
object we should specify \verb{vars = list(ADSL = <adsl object>)}.
It's recommended to include \code{Dataset} or \code{DatasetConnector} objects to
the \code{vars} list to preserve reproducibility. Please note that \code{vars}
are included to this object as local \code{vars} and they cannot be modified
within another dataset.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
self invisibly for chaining
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-mutate_dataset"></a>}}
\if{latex}{\out{\hypertarget{method-mutate_dataset}{}}}
\subsection{Method \code{mutate_dataset()}}{
Mutate dataset by code.
Execution of \code{mutate_code} is delayed after datasets are pulled
(\code{isTRUE(is_pulled)}).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataAbstract$mutate_dataset(dataname, code, vars = list())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dataname}}{(\code{character}) Dataname to be mutated}

\item{\code{code}}{(\code{character}) Code to mutate the dataset. Must contain the
\code{dataset$dataname}}

\item{\code{vars}}{(named \code{list})) \cr
In case when this object code depends on other \code{Dataset} object(s) or
other constant value, this/these object(s) should be included as named
element(s) of the list. For example if this object code needs \code{ADSL}
object we should specify \verb{vars = list(ADSL = <adsl object>)}.
It's recommended to include \code{Dataset} or \code{DatasetConnector} objects to
the \code{vars} list to preserve reproducibility. Please note that \code{vars}
are included to this object as local \code{vars} and they cannot be modified
within another dataset.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
self invisibly for chaining
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set_check"></a>}}
\if{latex}{\out{\hypertarget{method-set_check}{}}}
\subsection{Method \code{set_check()}}{
Set reproducibility check
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataAbstract$set_check(check = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{check}}{(\code{logical}) whether to perform reproducibility check.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
(\code{self}) invisibly for chaining.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set_pull_code"></a>}}
\if{latex}{\out{\hypertarget{method-set_pull_code}{}}}
\subsection{Method \code{set_pull_code()}}{
Set pull code
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataAbstract$set_pull_code(code)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{code}}{(\code{character} value)\cr
code to reproduce \code{data} in \code{Dataset} objects. Can't be set if any dataset
has \code{code} set already.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
(\code{self}) invisibly for chaining.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{DataAbstract$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
