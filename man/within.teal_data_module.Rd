% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/teal_data_module-eval_code.R
\name{within.teal_data_module}
\alias{within.teal_data_module}
\title{Evaluate expression in \code{qenv} object.}
\usage{
\method{within}{teal_data_module}(data, expr, ...)
}
\arguments{
\item{data}{(\code{teal_data_module}) object}

\item{expr}{\code{expression} to evaluate}

\item{...}{\code{name:value} pairs to inject values into \code{expr}}
}
\value{
Returns a \code{teal_data_module} object with a delayed evaluation of \code{expr}
when module.
}
\description{
Convenience function for evaluating inline code inside the environment of a
\code{teal_data_module}
}
\details{
This is a wrapper for \code{eval_code} that provides a simplified way of passing code for evaluation.
It accepts only inline expressions (both simple and compound) and allows for injecting values into \code{expr}
through the \code{...} argument: as \code{name:value} pairs are passed to \code{...},
\code{name} in \code{expr} will be replaced with \code{value}.
}
\examples{
tdm <- teal_data_module(
  ui = function(id) div(id = shiny::NS(id)("div_id")),
  server = function(id) {
    shiny::moduleServer(id, function(input, output, session) {
      shiny::reactive(teal_data(IRIS = iris))
    })
  }
)
within(tdm, IRIS <- subset(IRIS, Species == "virginica"))
}
\seealso{
\code{\link[base:with]{base::within()}}, \code{\link[=teal_data_module]{teal_data_module()}}
}
