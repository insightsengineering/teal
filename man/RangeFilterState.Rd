% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/FilterState.R
\docType{class}
\name{RangeFilterState}
\alias{RangeFilterState}
\title{\code{FilterState} object for numeric variable}
\value{
invisibly \code{NULL}
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}}
}
\note{
Casts the passed object to \code{numeric} before validating the input
making it possible to pass any object coercible to \code{numeric} to this method.
}
\examples{
filter_state <- teal:::RangeFilterState$new(
  c(NA, Inf, seq(1:10)),
  varname = "x",
  input_dataname = as.name("data"),
  extract_type = character(0)
)
isolate(filter_state$get_call())
isolate(filter_state$set_selected(c(3L, 8L)))
isolate(filter_state$set_keep_na(TRUE))
isolate(filter_state$set_keep_inf(TRUE))
isolate(filter_state$get_call())


## ------------------------------------------------
## Method `RangeFilterState$set_selected`
## ------------------------------------------------

filter <- teal:::RangeFilterState$new(c(1, 2, 3, 4), varname = "name")
filter$set_selected(c(2, 3))

}
\section{Super class}{
\code{\link[teal:FilterState]{teal::FilterState}} -> \code{RangeFilterState}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{RangeFilterState$new()}}
\item \href{#method-get_call}{\code{RangeFilterState$get_call()}}
\item \href{#method-get_keep_inf}{\code{RangeFilterState$get_keep_inf()}}
\item \href{#method-ui}{\code{RangeFilterState$ui()}}
\item \href{#method-server}{\code{RangeFilterState$server()}}
\item \href{#method-set_keep_inf}{\code{RangeFilterState$set_keep_inf()}}
\item \href{#method-set_state}{\code{RangeFilterState$set_state()}}
\item \href{#method-set_selected}{\code{RangeFilterState$set_selected()}}
\item \href{#method-clone}{\code{RangeFilterState$clone()}}
}
}
\if{html}{
\out{<details ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="teal" data-topic="FilterState" data-id="destroy_observers">}\href{../../teal/html/FilterState.html#method-destroy_observers}{\code{teal::FilterState$destroy_observers()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="teal" data-topic="FilterState" data-id="get_dataname">}\href{../../teal/html/FilterState.html#method-get_dataname}{\code{teal::FilterState$get_dataname()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="teal" data-topic="FilterState" data-id="get_keep_na">}\href{../../teal/html/FilterState.html#method-get_keep_na}{\code{teal::FilterState$get_keep_na()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="teal" data-topic="FilterState" data-id="get_selected">}\href{../../teal/html/FilterState.html#method-get_selected}{\code{teal::FilterState$get_selected()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="teal" data-topic="FilterState" data-id="get_varlabel">}\href{../../teal/html/FilterState.html#method-get_varlabel}{\code{teal::FilterState$get_varlabel()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="teal" data-topic="FilterState" data-id="get_varname">}\href{../../teal/html/FilterState.html#method-get_varname}{\code{teal::FilterState$get_varname()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="teal" data-topic="FilterState" data-id="set_keep_na">}\href{../../teal/html/FilterState.html#method-set_keep_na}{\code{teal::FilterState$set_keep_na()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Initialize a \code{FilterState} object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RangeFilterState$new(
  x,
  varname,
  varlabel = character(0),
  input_dataname = NULL,
  extract_type = character(0)
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x}}{(\code{numeric})\cr
values of the variable used in filter}

\item{\code{varname}}{(\code{character}, \code{name})\cr
name of the variable}

\item{\code{varlabel}}{(\code{character(1)})\cr
label of the variable (optional).}

\item{\code{input_dataname}}{(\code{name} or \code{call})\cr
name of dataset where \code{x} is taken from}

\item{\code{extract_type}}{(\code{character(0)}, \code{character(1)})\cr
whether condition calls should be prefixed by dataname. Possible values:
\itemize{
\item{\code{character(0)} (default)}{ \code{varname} in the condition call will not be prefixed}
\item{\code{"list"}}{ \code{varname} in the condition call will be returned as \verb{<input_dataname>$<varname>}}
\item{\code{"matrix"}}{ \code{varname} in the condition call will be returned as \verb{<input_dataname>[, <varname>]}}
}}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_call"></a>}}
\if{latex}{\out{\hypertarget{method-get_call}{}}}
\subsection{Method \code{get_call()}}{
Returns reproducible condition call for current selection.
For this class returned call looks like
\verb{<varname> >= <min value> & <varname> <= <max value>} with
optional \verb{is.na(<varname>)} and \verb{is.finite(<varname>)}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RangeFilterState$get_call()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
(\code{call})
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_keep_inf"></a>}}
\if{latex}{\out{\hypertarget{method-get_keep_inf}{}}}
\subsection{Method \code{get_keep_inf()}}{
Returns current \code{keep_inf} selection
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RangeFilterState$get_keep_inf()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
(\code{logical(1)})
UI Module for \code{RangeFilterState}.
This UI element contains two values for \code{min} and \code{max}
of the range and two checkboxes whether to keep the \code{NA} or \code{Inf}  values.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ui"></a>}}
\if{latex}{\out{\hypertarget{method-ui}{}}}
\subsection{Method \code{ui()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RangeFilterState$ui(id)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{(\code{character(1)})\cr
id of shiny element}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-server"></a>}}
\if{latex}{\out{\hypertarget{method-server}{}}}
\subsection{Method \code{server()}}{
Server module
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RangeFilterState$server(id)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{(\code{character(1)})\cr
an ID string that corresponds with the ID used to call the module's UI function.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{moduleServer} function which returns \code{NULL}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set_keep_inf"></a>}}
\if{latex}{\out{\hypertarget{method-set_keep_inf}{}}}
\subsection{Method \code{set_keep_inf()}}{
Set if \code{Inf} should be kept
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RangeFilterState$set_keep_inf(value)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{value}}{(\code{logical(1)})\cr
Value(s) which come from the filter selection. Value is set in \code{server}
modules after selecting check-box-input in the shiny interface. Values are set to
\code{private$keep_inf} which is reactive.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set_state"></a>}}
\if{latex}{\out{\hypertarget{method-set_state}{}}}
\subsection{Method \code{set_state()}}{
Set state
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RangeFilterState$set_state(state)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{state}}{(\code{list})\cr
contains fields relevant for a specific class
\itemize{
\item{\code{selected}}{ defines initial selection}
\item{\code{keep_na} (\code{logical})}{ defines whether to keep or remove \code{NA} values}
\item{\code{keep_inf} (\code{logical})}{ defines whether to keep or remove \code{Inf} values}
}}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set_selected"></a>}}
\if{latex}{\out{\hypertarget{method-set_selected}{}}}
\subsection{Method \code{set_selected()}}{
Sets the selected values of this \code{RangeFilterState}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RangeFilterState$set_selected(value)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{value}}{(\code{numeric(2)}) the two-elements array of the lower and upper bound
of the selected range. Must not contain NA values.}
}
\if{html}{\out{</div>}}
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{filter <- teal:::RangeFilterState$new(c(1, 2, 3, 4), varname = "name")
filter$set_selected(c(2, 3))

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RangeFilterState$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
