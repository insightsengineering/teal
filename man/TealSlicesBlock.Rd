% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/teal_reporter.R
\docType{class}
\name{TealSlicesBlock}
\alias{TealSlicesBlock}
\title{\code{TealSlicesBlock}}
\description{
Specialized \code{TealSlicesBlock} block for managing filter panel content in reports.
}
\examples{

## ------------------------------------------------
## Method `TealSlicesBlock$from_list`
## ------------------------------------------------

TealSlicesBlock <- getFromNamespace("TealSlicesBlock", "teal")
block <- TealSlicesBlock$new()
block$from_list(list(text = "sth", style = "default"))


## ------------------------------------------------
## Method `TealSlicesBlock$to_list`
## ------------------------------------------------

TealSlicesBlock <- getFromNamespace("TealSlicesBlock", "teal")
block <- TealSlicesBlock$new()
block$to_list()

}
\keyword{internal}
\section{Super classes}{
\code{\link[teal.reporter:ContentBlock]{teal.reporter::ContentBlock}} -> \code{\link[teal.reporter:TextBlock]{teal.reporter::TextBlock}} -> \code{TealSlicesBlock}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-TealSlicesBlock-new}{\code{TealSlicesBlock$new()}}
\item \href{#method-TealSlicesBlock-set_content}{\code{TealSlicesBlock$set_content()}}
\item \href{#method-TealSlicesBlock-from_list}{\code{TealSlicesBlock$from_list()}}
\item \href{#method-TealSlicesBlock-to_list}{\code{TealSlicesBlock$to_list()}}
\item \href{#method-TealSlicesBlock-clone}{\code{TealSlicesBlock$clone()}}
}
}
\if{html}{\out{
<details open><summary>Inherited methods</summary>
<ul>
<li><span class="pkg-link" data-pkg="teal.reporter" data-topic="ContentBlock" data-id="get_content"><a href='../../teal.reporter/html/ContentBlock.html#method-ContentBlock-get_content'><code>teal.reporter::ContentBlock$get_content()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.reporter" data-topic="TextBlock" data-id="get_available_styles"><a href='../../teal.reporter/html/TextBlock.html#method-TextBlock-get_available_styles'><code>teal.reporter::TextBlock$get_available_styles()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.reporter" data-topic="TextBlock" data-id="get_style"><a href='../../teal.reporter/html/TextBlock.html#method-TextBlock-get_style'><code>teal.reporter::TextBlock$get_style()</code></a></span></li>
<li><span class="pkg-link" data-pkg="teal.reporter" data-topic="TextBlock" data-id="set_style"><a href='../../teal.reporter/html/TextBlock.html#method-TextBlock-set_style'><code>teal.reporter::TextBlock$set_style()</code></a></span></li>
</ul>
</details>
}}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TealSlicesBlock-new"></a>}}
\if{latex}{\out{\hypertarget{method-TealSlicesBlock-new}{}}}
\subsection{Method \code{new()}}{
Returns a \code{TealSlicesBlock} object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TealSlicesBlock$new(content = teal_slices(), style = "verbatim")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{content}}{(\code{teal_slices}) object returned from \code{\link[=teal_slices]{teal_slices()}} function.}

\item{\code{style}}{(\code{character(1)}) string specifying style to apply.}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Returns a \code{TealSlicesBlock} object with no content and no parameters.
}

\subsection{Returns}{
Object of class \code{TealSlicesBlock}, invisibly.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TealSlicesBlock-set_content"></a>}}
\if{latex}{\out{\hypertarget{method-TealSlicesBlock-set_content}{}}}
\subsection{Method \code{set_content()}}{
Sets content of this \code{TealSlicesBlock}.
Sets content as \code{YAML} text which represents a list generated from \code{teal_slices}.
The list displays limited number of fields from \code{teal_slice} objects, but this list is
sufficient to conclude which filters were applied.
When \code{selected} field in \code{teal_slice} object is a range, then it is displayed as a "min"
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TealSlicesBlock$set_content(content)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{content}}{(\code{teal_slices}) object returned from \code{\link[=teal_slices]{teal_slices()}} function.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{self}, invisibly.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TealSlicesBlock-from_list"></a>}}
\if{latex}{\out{\hypertarget{method-TealSlicesBlock-from_list}{}}}
\subsection{Method \code{from_list()}}{
Create the \code{TealSlicesBlock} from a list.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TealSlicesBlock$from_list(x)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x}}{(\verb{named list}) with two fields \code{text} and \code{style}.
Use the \code{get_available_styles} method to get all possible styles.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{self}, invisibly.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{TealSlicesBlock <- getFromNamespace("TealSlicesBlock", "teal")
block <- TealSlicesBlock$new()
block$from_list(list(text = "sth", style = "default"))

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TealSlicesBlock-to_list"></a>}}
\if{latex}{\out{\hypertarget{method-TealSlicesBlock-to_list}{}}}
\subsection{Method \code{to_list()}}{
Convert the \code{TealSlicesBlock} to a list.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TealSlicesBlock$to_list()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\verb{named list} with a text and style.
}
\subsection{Examples}{
\if{html}{\out{<div class="r example copy">}}
\preformatted{TealSlicesBlock <- getFromNamespace("TealSlicesBlock", "teal")
block <- TealSlicesBlock$new()
block$to_list()

}
\if{html}{\out{</div>}}

}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-TealSlicesBlock-clone"></a>}}
\if{latex}{\out{\hypertarget{method-TealSlicesBlock-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TealSlicesBlock$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
