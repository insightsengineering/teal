% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/module_set_bookmark_state.R
\name{srv_init_filter_state}
\alias{srv_init_filter_state}
\title{Server module to set initial filter state}
\usage{
srv_init_filter_state(id, datasets, filter)
}
\arguments{
\item{id}{An ID string that corresponds with the ID used to call the module's
UI function.}

\item{datasets}{(\code{FilteredData})\cr
object to store filter state and filtered datasets, shared across modules. For more
details see \code{\link{FilteredData}}.}

\item{filter}{(\code{list})\cr
You can define filters that show when the app starts. List names should be
named according to datanames passed to the \code{data} argument.
In case of  data.frame` the list should be composed as follows:\preformatted{list(<dataname1> = list(<varname1> = ..., <varname2> = ...),
     <dataname2> = list(...),
     ...)

}

For example, filters for variable \code{Sepal.Length} in \code{iris} can be specified as
follows:\preformatted{list(iris = list(Sepal.Length = list(selected = c(5.0, 7.0))))
# or
list(iris = list(Sepal.Length = c(5.0, 7.0)))
}

In case developer would like to include \code{NA} and \code{Inf} values in  the
filtered dataset.\preformatted{list(Species = list(selected = c(5.0, 7.0), keep_na = TRUE, keep_inf = TRUE))
list(Species = c(c(5.0, 7.0), NA, Inf))
}

To initialize with specific variable filter with all values on start, one
can use\preformatted{list(Species = default_filter())
}

\code{filter} should be set with respect to the class of the column:
\itemize{
\item \code{numeric}: \code{selected} should be a two elements vector defining the range
of the filter.
\item \code{Date}: \code{selected} should be a two elements vector defining the date-range
of the filter
\item \code{POSIXct}: \code{selected} should be a two elements vector defining the
\code{datetime} range of the filter
\item \code{character} and \code{factor}: \code{selected} should be a vector of any length
defining initial values selected to filter.
\cr
\code{MultiAssayExperiment} \code{filter} should be specified in slightly different
way. Since \code{\link[MultiAssayExperiment:MultiAssayExperiment]{MultiAssayExperiment::MultiAssayExperiment()}} contains
patient data (\code{\link[SummarizedExperiment:SummarizedExperiment-class]{SummarizedExperiment::colData()}}) with list of experiments
(\code{\link[MultiAssayExperiment:ExperimentList]{MultiAssayExperiment::ExperimentList()}}), \code{filter} list should be named
in the following name.
\cr
}\preformatted{list(
  <MAE dataname> = list(
    subjects = list(<column in colData> = ..., <column in colData> = ...),
    <experiment name> = list(
      subset = list(<column in rowData of experiment> = ...,
                    <column in rowData of experiment> = ...),
      select = list(<column in colData of experiment> = ...,
                    <column in colData of experiment> = ...)
    )
  )
)
}

\code{filter} is ignored if the app is restored from a bookmarked state.}
}
\value{
\code{shiny} module which returns \code{NULL}
}
\description{
Initial filter state is set to:
\enumerate{
\item state defined by developer in the \code{filter} argument of \code{init}
\item When app is restored from with bookmark state, then filter-state from
the URL attributes is set. Bookmark state has a priority over \code{filter}
argument.
}
}
\details{
The Shiny bookmarking functionality by default only stores inputs.
We need to add \code{FilteredData} object to the state so we restore it as well.
To test bookmarking, include the \code{bookmark_module}, click on the bookmark
button and then get the link. Keep the Shiny app running and open the
obtained link in another browser tab.
}
\keyword{internal}
