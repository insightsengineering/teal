% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/module_transform_data.R
\name{module_transform_data}
\alias{module_transform_data}
\alias{ui_transform_data}
\alias{srv_transform_data}
\title{Module to transform \code{reactive} \code{teal_data}}
\usage{
ui_transform_data(id, transforms, class = "well")

srv_transform_data(
  id,
  data,
  transforms,
  modules = NULL,
  is_transform_failed = reactiveValues()
)
}
\arguments{
\item{id}{(\code{character(1)}) Module id}

\item{transforms}{(\code{list} of \code{teal_transform_module}) that will be applied to transform module's data input.
Each transform module UI will appear in the \code{teal} application, unless the \code{custom_ui} attribute is set on the list.
If so, the module developer is responsible to display the UI in the module itself. \code{datanames} of the \code{transforms}
will be added to the \code{datanames}.}

\item{data}{(\verb{reactive teal_data})}

\item{modules}{(\code{teal_modules} or \code{teal_module}) For \code{datanames} validation purpose}

\item{is_transform_failed}{(\code{reactiveValues}) contains \code{logical} flags named after each transform.
Help to determine if any previous transform failed, so that following transforms can be disabled
and display a generic failure message.}
}
\value{
\code{reactive} \code{teal_data}
}
\description{
Module calls \code{\link[=teal_transform_module]{teal_transform_module()}} in sequence so that \verb{reactive teal_data} output
from one module is handed over to the following module's input.
}
