% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/TealDataConnection.R
\name{TealDataConnection}
\alias{TealDataConnection}
\title{A \code{TealDataConnection} class of objects

Objects of this class store the connection to a data source.
It can be a database or server connection.}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}}
}
\examples{
open_fun <- callable_function(data.frame) # define opening function
open_fun$set_args(list(x = 1:5)) # define fixed arguments to opening function

close_fun <- callable_function(print) # define closing function
close_fun$set_args(list(x = "Hi there")) # define fixed arguments to closing function

ping_fun <- callable_function(function() TRUE)

x <- data_connection( # define connection
  ping_fun = ping_fun, # define ping function
  open_fun = open_fun, # define opening function
  close_fun = close_fun # define closing function
)

x$set_open_args(args = list(y = letters[1:5])) # define additional arguments if necessary

x$open() # call opening function
x$get_open_call() # check reproducible R code

# get data from connection via TealDataConnector$get_dataset()
\dontrun{
x$open(args = list(x = 1:5, y = letters[1:5])) # able to call opening function with arguments
x$close() # call closing function
}

}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{TealDataConnection$new()}}
\item \href{#method-finalize}{\code{TealDataConnection$finalize()}}
\item \href{#method-is_opened}{\code{TealDataConnection$is_opened()}}
\item \href{#method-is_failed}{\code{TealDataConnection$is_failed()}}
\item \href{#method-launch}{\code{TealDataConnection$launch()}}
\item \href{#method-open}{\code{TealDataConnection$open()}}
\item \href{#method-get_conn}{\code{TealDataConnection$get_conn()}}
\item \href{#method-get_open_call}{\code{TealDataConnection$get_open_call()}}
\item \href{#method-get_open_error_message}{\code{TealDataConnection$get_open_error_message()}}
\item \href{#method-get_preopen_server}{\code{TealDataConnection$get_preopen_server()}}
\item \href{#method-get_open_server}{\code{TealDataConnection$get_open_server()}}
\item \href{#method-get_open_ui}{\code{TealDataConnection$get_open_ui()}}
\item \href{#method-is_open_failed}{\code{TealDataConnection$is_open_failed()}}
\item \href{#method-set_open_args}{\code{TealDataConnection$set_open_args()}}
\item \href{#method-set_preopen_server}{\code{TealDataConnection$set_preopen_server()}}
\item \href{#method-set_open_server}{\code{TealDataConnection$set_open_server()}}
\item \href{#method-set_open_ui}{\code{TealDataConnection$set_open_ui()}}
\item \href{#method-close}{\code{TealDataConnection$close()}}
\item \href{#method-get_close_call}{\code{TealDataConnection$get_close_call()}}
\item \href{#method-get_close_error_message}{\code{TealDataConnection$get_close_error_message()}}
\item \href{#method-get_close_server}{\code{TealDataConnection$get_close_server()}}
\item \href{#method-is_close_failed}{\code{TealDataConnection$is_close_failed()}}
\item \href{#method-set_close_args}{\code{TealDataConnection$set_close_args()}}
\item \href{#method-set_close_ui}{\code{TealDataConnection$set_close_ui()}}
\item \href{#method-set_close_server}{\code{TealDataConnection$set_close_server()}}
\item \href{#method-clone}{\code{TealDataConnection$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Create a new \code{TealDataConnection} object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TealDataConnection$new(
  open_fun = NULL,
  close_fun = NULL,
  ping_fun = NULL,
  if_conn_obj = FALSE
)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{open_fun}}{(\code{CallableFunction}) function to open connection}

\item{\code{close_fun}}{(\code{CallableFunction}) function to close connection}

\item{\code{ping_fun}}{(\code{CallableFunction}) function to ping connection}

\item{\code{if_conn_obj}}{optional, (\code{logical}) whether to store \code{conn} object returned from opening
connection}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
new \code{TealDataConnection} object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-finalize"></a>}}
\if{latex}{\out{\hypertarget{method-finalize}{}}}
\subsection{Method \code{finalize()}}{
Finalize method closing the connection.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TealDataConnection$finalize()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
NULL
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-is_opened"></a>}}
\if{latex}{\out{\hypertarget{method-is_opened}{}}}
\subsection{Method \code{is_opened()}}{
If connection is opened

If open connection has been successfully evaluated
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TealDataConnection$is_opened()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
(\code{logical}) if connection is open
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-is_failed"></a>}}
\if{latex}{\out{\hypertarget{method-is_failed}{}}}
\subsection{Method \code{is_failed()}}{
Check if connection has not failed.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TealDataConnection$is_failed()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
(\code{logical}) \code{TRUE} if connection failed, else \code{FALSE}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-launch"></a>}}
\if{latex}{\out{\hypertarget{method-launch}{}}}
\subsection{Method \code{launch()}}{
Run simple application that uses its \code{ui} and \code{server} fields to open the
connection.

Useful for debugging
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TealDataConnection$launch()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
An object that represents the app
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-open"></a>}}
\if{latex}{\out{\hypertarget{method-open}{}}}
\subsection{Method \code{open()}}{
Open the connection.

Note that if the connection is already opened then it does nothing.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TealDataConnection$open(args = NULL, silent = FALSE, try = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{args}}{(\code{NULL} or named \code{list}) additional arguments not set up previously}

\item{\code{silent}}{(\code{logical}) whether convert all "missing function" errors to messages}

\item{\code{try}}{(\code{logical}) whether perform function evaluation inside \code{try} clause}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
returns \code{self} if successful or if connection has been already
opened. If \code{open_fun} fails, app returns an error in form of
\code{shinyjs::alert} (if \code{try = TRUE}) or breaks the app (if \code{try = FALSE})
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_conn"></a>}}
\if{latex}{\out{\hypertarget{method-get_conn}{}}}
\subsection{Method \code{get_conn()}}{
Get internal connection object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TealDataConnection$get_conn()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{connection} object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_open_call"></a>}}
\if{latex}{\out{\hypertarget{method-get_open_call}{}}}
\subsection{Method \code{get_open_call()}}{
Get executed open connection call
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TealDataConnection$get_open_call(deparse = TRUE, args = NULL, silent = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deparse}}{(\code{logical}) whether return deparsed form of a call}

\item{\code{args}}{(\code{NULL} or named \code{list}) additional arguments not set up previously}

\item{\code{silent}}{(\code{logical}) whether convert all "missing function" errors to messages}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
optionally deparsed \code{call} object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_open_error_message"></a>}}
\if{latex}{\out{\hypertarget{method-get_open_error_message}{}}}
\subsection{Method \code{get_open_error_message()}}{
Get error message from last connection
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TealDataConnection$get_open_error_message()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
(\code{character})\cr
text of the error message or \code{character(0)} if last
connection was successful.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_preopen_server"></a>}}
\if{latex}{\out{\hypertarget{method-get_preopen_server}{}}}
\subsection{Method \code{get_preopen_server()}}{
Get shiny server module prior opening connection.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TealDataConnection$get_preopen_server()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
(\code{function}) shiny server prior opening connection.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_open_server"></a>}}
\if{latex}{\out{\hypertarget{method-get_open_server}{}}}
\subsection{Method \code{get_open_server()}}{
Get shiny server module to open connection.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TealDataConnection$get_open_server()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
(\code{function}) shiny server to open connection.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_open_ui"></a>}}
\if{latex}{\out{\hypertarget{method-get_open_ui}{}}}
\subsection{Method \code{get_open_ui()}}{
Get Shiny module with inputs to open connection
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TealDataConnection$get_open_ui(id)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{\code{character} shiny element id}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
(\code{function}) shiny ui to set arguments to open connection function.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-is_open_failed"></a>}}
\if{latex}{\out{\hypertarget{method-is_open_failed}{}}}
\subsection{Method \code{is_open_failed()}}{
Check if open connection has not failed.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TealDataConnection$is_open_failed()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
(\code{logical}) \code{TRUE} if open connection failed, else \code{FALSE}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set_open_args"></a>}}
\if{latex}{\out{\hypertarget{method-set_open_args}{}}}
\subsection{Method \code{set_open_args()}}{
Set open connection function argument
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TealDataConnection$set_open_args(args, silent = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{args}}{(\code{NULL} or named \code{list}) with values where list names are argument names}

\item{\code{silent}}{(\code{logical}) whether convert all "missing function" errors to messages}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
(\code{self}) invisibly for chaining.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set_preopen_server"></a>}}
\if{latex}{\out{\hypertarget{method-set_preopen_server}{}}}
\subsection{Method \code{set_preopen_server()}}{
Set pre-open connection server function

This function will be called before submit button will be hit.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TealDataConnection$set_preopen_server(preopen_module)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{preopen_module}}{(\code{function})\cr
A shiny module server function}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
(\code{self}) invisibly for chaining.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set_open_server"></a>}}
\if{latex}{\out{\hypertarget{method-set_open_server}{}}}
\subsection{Method \code{set_open_server()}}{
Set open connection server function

This function will be called after submit button will be hit. There is no possibility to
specify some dynamic \code{ui} as \code{server} function is executed after hitting submit
button.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TealDataConnection$set_open_server(open_module)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{open_module}}{(\code{function})\cr
A shiny module server function that should load data from all connectors}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
(\code{self}) invisibly for chaining.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set_open_ui"></a>}}
\if{latex}{\out{\hypertarget{method-set_open_ui}{}}}
\subsection{Method \code{set_open_ui()}}{
Set open connection UI function
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TealDataConnection$set_open_ui(open_module)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{open_module}}{(\code{function})\cr
shiny module as function. Inputs specified in this \code{ui} are passed to server module
defined by \code{set_open_server} method.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
(\code{self}) invisibly for chaining.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-close"></a>}}
\if{latex}{\out{\hypertarget{method-close}{}}}
\subsection{Method \code{close()}}{
Close the connection.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TealDataConnection$close(silent = FALSE, try = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{silent}}{(\code{logical}) whether convert all "missing function" errors to messages}

\item{\code{try}}{(\code{logical}) whether perform function evaluation inside \code{try} clause}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
returns (\code{self}) if successful. For unsuccessful evaluation it
depends on \code{try} argument: if \code{try = TRUE} then returns
\code{error}, for \code{try = FALSE} otherwise
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_close_call"></a>}}
\if{latex}{\out{\hypertarget{method-get_close_call}{}}}
\subsection{Method \code{get_close_call()}}{
Get executed close connection call
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TealDataConnection$get_close_call(deparse = TRUE, silent = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deparse}}{(\code{logical}) whether return deparsed form of a call}

\item{\code{silent}}{(\code{logical}) whether convert all "missing function" errors to messages}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
optionally deparsed \code{call} object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_close_error_message"></a>}}
\if{latex}{\out{\hypertarget{method-get_close_error_message}{}}}
\subsection{Method \code{get_close_error_message()}}{
Get error message from last connection
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TealDataConnection$get_close_error_message()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
(\code{character})\cr
text of the error message or \code{character(0)} if last
connection was successful.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_close_server"></a>}}
\if{latex}{\out{\hypertarget{method-get_close_server}{}}}
\subsection{Method \code{get_close_server()}}{
Get shiny server module to close connection.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TealDataConnection$get_close_server()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
the \verb{server function} to close connection.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-is_close_failed"></a>}}
\if{latex}{\out{\hypertarget{method-is_close_failed}{}}}
\subsection{Method \code{is_close_failed()}}{
Check if close connection has not failed.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TealDataConnection$is_close_failed()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
(\code{logical}) \code{TRUE} if close connection failed, else \code{FALSE}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set_close_args"></a>}}
\if{latex}{\out{\hypertarget{method-set_close_args}{}}}
\subsection{Method \code{set_close_args()}}{
Set close connection function argument
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TealDataConnection$set_close_args(args, silent = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{args}}{(named \code{list}) with values where list names are argument names}

\item{\code{silent}}{(\code{logical}) whether convert all "missing function" errors to messages}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
(\code{self}) invisibly for chaining.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set_close_ui"></a>}}
\if{latex}{\out{\hypertarget{method-set_close_ui}{}}}
\subsection{Method \code{set_close_ui()}}{
Set close connection UI function
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TealDataConnection$set_close_ui(close_module)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{close_module}}{(\code{function})\cr
shiny module as function. Inputs specified in this \code{ui} are passed to server module
defined by \code{set_close_server} method.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
(\code{self}) invisibly for chaining.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set_close_server"></a>}}
\if{latex}{\out{\hypertarget{method-set_close_server}{}}}
\subsection{Method \code{set_close_server()}}{
Set close-connection server function

This function will be called after submit button will be hit. There is no possibility to
specify some dynamic \code{ui} as \code{server} function is executed after hitting submit
button.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TealDataConnection$set_close_server(close_module)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{close_module}}{(\code{function})\cr
A shiny module server function that should load data from all connectors}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
(\code{self}) invisibly for chaining.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{TealDataConnection$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
