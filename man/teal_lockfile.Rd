% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/teal_lockfile.R
\name{teal_lockfile}
\alias{teal_lockfile}
\alias{teal_lockfile_invoke}
\alias{renv_snapshot}
\alias{teal_lockfile_tracker}
\alias{teal_lockfile_handler}
\alias{teal_lockfile_downloadhandler}
\title{Generate lockfile for application's environment reproducibility}
\usage{
teal_lockfile_invoke()

renv_snapshot(lockfile_path = NULL, opts, sysenv, libpaths, wd)

teal_lockfile_tracker(process)

teal_lockfile_handler(process)

teal_lockfile_downloadhandler()
}
\arguments{
\item{lockfile_path}{(\code{character}) path to the lockfile (\code{"teal_app.lock"}).}

\item{opts}{(\code{list}) options to be set in the \code{\link[mirai:daemon]{mirai::daemon()}}.}

\item{sysenv}{(\code{list}) system environment variables to be set in the \code{\link[mirai:daemon]{mirai::daemon()}}.}

\item{libpaths}{(\code{character}) library paths to be set in the \code{\link[mirai:daemon]{mirai::daemon()}}.}

\item{wd}{(\code{character(1)}) working directory to be set in the \code{\link[mirai:daemon]{mirai::daemon()}}.}

\item{process}{(\code{mirai}) process to track the status of the lockfile creation.}
}
\value{
\code{ExtendedTask} processing \code{renv} lockfile or \code{NULL} if lockfile has been provided through options
(skipping asynchronous process).
}
\description{
Generate lockfile for application's environment reproducibility
}
\section{lockfile creation steps}{

Process is split into multiple steps.
\enumerate{
\item \code{teal_lockfile_invoke} is executed in \link{init} before application starts. It is better when task starts in
\link{init} as it is a one-time process and does not need to be repeated when each \code{shiny} session starts.
Function invokes \code{renv_snapshot} (via \code{ExtendedTask}) to begin creation of the lockfile.
\item \code{ExtendedTask} with background \code{mirai} process is passed to the \code{teal_lockfile_handler} to track the
status of the task.
\item Once \code{ExtendedTask} is completed, \code{teal_lockfile_handler} is triggered to log the status of the lockfile,
send a notification to UI and show the download button.
\item \code{teal_lockfile_downloadhandler} is used to download the lockfile (when button is shown).
}

Please note that if precomputed lockfile file path has been provided through \code{teal.renv.lockfile} option, then
whole process is skipped and download lockfile button becomes available.
}

\section{Different ways of creating lockfile}{

The function leverages \code{\link[renv:snapshot]{renv::snapshot()}}, which offers multiple methods for lockfile creation.
\itemize{
\item User-specified:
\itemize{
\item \strong{Pre-computed lockfile}: Users can provide their own pre-computed lockfile by specifying the path via
\code{teal.renv.lockfile} option. Automatic lockfile computation is skipped in such case.
}
\item Automatically computed:
\itemize{
\item \strong{Working directory lockfile}: If \code{teal.renv.lockfile} is not set, \code{teal} will, by default, create an
\code{implicit} type lockfile that uses \code{renv::dependencies()} to detect all R packages in the current project's
working directory.
\item \strong{\code{DESCRIPTION}-based lockfile}: To generate a lockfile based on a \code{DESCRIPTION} file in your working
directory, set \code{renv::settings$snapshot.type("explicit")}. The naming convention for \code{type} follows
\code{renv::snapshot()}. For the \code{"explicit"} type, refer to \code{renv::settings$package.dependency.fields()} for the
\code{DESCRIPTION} fields included in the lockfile.
\item \strong{Custom files-based lockfile}: To specify custom files as the basis for the lockfile, set
\code{renv::settings$snapshot.type("custom")} and configure the \code{renv.snapshot.filter} option.
}
}
}

\section{lockfile usage}{

After creating the lockfile, you can restore the application environment using \code{renv::restore()}.
}

\seealso{
\code{\link[renv:snapshot]{renv::snapshot()}}, \code{\link[renv:restore]{renv::restore()}}.
}
\keyword{internal}
