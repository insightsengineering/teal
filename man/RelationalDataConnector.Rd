% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RelationalDataConnector.R
\name{RelationalDataConnector}
\alias{RelationalDataConnector}
\title{Manage multiple and \code{DatasetConnector} of the same type.}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}}

Class manages \code{DatasetConnector} to specify additional dynamic arguments and to
open/close connection.
}
\examples{
library(scda)
adsl_cf <- callable_function(function() synthetic_cdisc_data("latest")$adsl)
adsl <- cdisc_dataset_connector(dataname = "ADSL",
                                pull_callable = adsl_cf,
                                keys = get_cdisc_keys("ADSL"))
adlb_cf <- callable_function(function() synthetic_cdisc_data("latest")$adlb)
adlb <- cdisc_dataset_connector(dataname = "ADLB",
                                pull_callable = adlb_cf,
                                keys = get_cdisc_keys("ADLB"))
con <- teal:::rcd_connection()
x <- teal:::RelationalDataConnector$new(connection = con, connectors = list(adsl, adlb))

\dontrun{
x$launch()
x$get_datasets()
}

}
\section{Super class}{
\code{\link[teal:DataAbstract]{teal::DataAbstract}} -> \code{RelationalDataConnector}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{RelationalDataConnector$new()}}
\item \href{#method-get_connection}{\code{RelationalDataConnector$get_connection()}}
\item \href{#method-get_code_class}{\code{RelationalDataConnector$get_code_class()}}
\item \href{#method-get_server}{\code{RelationalDataConnector$get_server()}}
\item \href{#method-get_preopen_server}{\code{RelationalDataConnector$get_preopen_server()}}
\item \href{#method-get_ui}{\code{RelationalDataConnector$get_ui()}}
\item \href{#method-set_pull_args}{\code{RelationalDataConnector$set_pull_args()}}
\item \href{#method-set_ui}{\code{RelationalDataConnector$set_ui()}}
\item \href{#method-set_server}{\code{RelationalDataConnector$set_server()}}
\item \href{#method-set_preopen_server}{\code{RelationalDataConnector$set_preopen_server()}}
\item \href{#method-pull}{\code{RelationalDataConnector$pull()}}
\item \href{#method-launch}{\code{RelationalDataConnector$launch()}}
\item \href{#method-mutate}{\code{RelationalDataConnector$mutate()}}
\item \href{#method-is_failed}{\code{RelationalDataConnector$is_failed()}}
\item \href{#method-clone}{\code{RelationalDataConnector$clone()}}
}
}
\if{html}{
\out{<details ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="teal" data-topic="DataAbstract" data-id="check">}\href{../../teal/html/DataAbstract.html#method-check}{\code{teal::DataAbstract$check()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="teal" data-topic="DataAbstract" data-id="check_reproducibility">}\href{../../teal/html/DataAbstract.html#method-check_reproducibility}{\code{teal::DataAbstract$check_reproducibility()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="teal" data-topic="DataAbstract" data-id="execute_mutate">}\href{../../teal/html/DataAbstract.html#method-execute_mutate}{\code{teal::DataAbstract$execute_mutate()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="teal" data-topic="DataAbstract" data-id="get_check_result">}\href{../../teal/html/DataAbstract.html#method-get_check_result}{\code{teal::DataAbstract$get_check_result()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="teal" data-topic="DataAbstract" data-id="get_code">}\href{../../teal/html/DataAbstract.html#method-get_code}{\code{teal::DataAbstract$get_code()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="teal" data-topic="DataAbstract" data-id="get_datanames">}\href{../../teal/html/DataAbstract.html#method-get_datanames}{\code{teal::DataAbstract$get_datanames()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="teal" data-topic="DataAbstract" data-id="get_dataset">}\href{../../teal/html/DataAbstract.html#method-get_dataset}{\code{teal::DataAbstract$get_dataset()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="teal" data-topic="DataAbstract" data-id="get_datasets">}\href{../../teal/html/DataAbstract.html#method-get_datasets}{\code{teal::DataAbstract$get_datasets()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="teal" data-topic="DataAbstract" data-id="get_items">}\href{../../teal/html/DataAbstract.html#method-get_items}{\code{teal::DataAbstract$get_items()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="teal" data-topic="DataAbstract" data-id="is_pulled">}\href{../../teal/html/DataAbstract.html#method-is_pulled}{\code{teal::DataAbstract$is_pulled()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="teal" data-topic="DataAbstract" data-id="mutate_dataset">}\href{../../teal/html/DataAbstract.html#method-mutate_dataset}{\code{teal::DataAbstract$mutate_dataset()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="teal" data-topic="DataAbstract" data-id="set_check">}\href{../../teal/html/DataAbstract.html#method-set_check}{\code{teal::DataAbstract$set_check()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="teal" data-topic="DataAbstract" data-id="set_pull_code">}\href{../../teal/html/DataAbstract.html#method-set_pull_code}{\code{teal::DataAbstract$set_pull_code()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Create a new \code{RelationalDataConnector} object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RelationalDataConnector$new(connection, connectors)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{connection}}{(\code{DataConnection})\cr
connection to data source}

\item{\code{connectors}}{(\code{list} of \code{DatasetConnector} elements)\cr
list with dataset connectors}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_connection"></a>}}
\if{latex}{\out{\hypertarget{method-get_connection}{}}}
\subsection{Method \code{get_connection()}}{
Get connection to data source
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RelationalDataConnector$get_connection()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
connector's connection
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_code_class"></a>}}
\if{latex}{\out{\hypertarget{method-get_code_class}{}}}
\subsection{Method \code{get_code_class()}}{
Get internal \code{CodeClass} object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RelationalDataConnector$get_code_class()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\verb{\code{CodeClass}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_server"></a>}}
\if{latex}{\out{\hypertarget{method-get_server}{}}}
\subsection{Method \code{get_server()}}{

\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RelationalDataConnector$get_server()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
the \code{server} function
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_preopen_server"></a>}}
\if{latex}{\out{\hypertarget{method-get_preopen_server}{}}}
\subsection{Method \code{get_preopen_server()}}{

\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RelationalDataConnector$get_preopen_server()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
the \code{server} function
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_ui"></a>}}
\if{latex}{\out{\hypertarget{method-get_ui}{}}}
\subsection{Method \code{get_ui()}}{
Get Shiny module with inputs for all \code{DatasetConnector} objects
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RelationalDataConnector$get_ui(id)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{\code{character} shiny element id}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the \code{ui} function
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set_pull_args"></a>}}
\if{latex}{\out{\hypertarget{method-set_pull_args}{}}}
\subsection{Method \code{set_pull_args()}}{
Set argument to the \code{pull_fun}
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RelationalDataConnector$set_pull_args(args)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{args}}{(named \code{list})\cr
arguments values as separate list elements named by argument name. These arguments
are passed to each dataset.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
nothing
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set_ui"></a>}}
\if{latex}{\out{\hypertarget{method-set_ui}{}}}
\subsection{Method \code{set_ui()}}{
Set connector UI function
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RelationalDataConnector$set_ui(f)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{f}}{(\code{function})\cr
shiny module as function. Inputs specified in this \code{ui} are passed to server module
defined by \code{set_server} method.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
nothing
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set_server"></a>}}
\if{latex}{\out{\hypertarget{method-set_server}{}}}
\subsection{Method \code{set_server()}}{
Set connector server function

This function will be called after submit button will be hit. There is no possibility to
specify some dynamic \code{ui} as \code{server} function is executed after hitting submit
button.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RelationalDataConnector$set_server(f)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{f}}{(\code{function})\cr
A shiny module server function that should load data from all connectors}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
nothing
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set_preopen_server"></a>}}
\if{latex}{\out{\hypertarget{method-set_preopen_server}{}}}
\subsection{Method \code{set_preopen_server()}}{
Set connector pre-open server function

This function will be called before submit button will be hit.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RelationalDataConnector$set_preopen_server(f)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{f}}{(\code{function})\cr
A shiny module server function}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
nothing
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-pull"></a>}}
\if{latex}{\out{\hypertarget{method-pull}{}}}
\subsection{Method \code{pull()}}{
Load data from each \code{DatasetConnector}
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RelationalDataConnector$pull(con_args = NULL, args = NULL, try = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{con_args}}{(\code{NULL} or named \code{list})\cr
additional dynamic arguments for connection function. \code{args} will be passed to each
\code{DatasetConnector} object to evaluate \code{CallableFunction} assigned to
this dataset. If \code{args} is null than default set of arguments will be used, otherwise
call will be executed on these arguments only (arguments set before will be ignored).
\code{pull} function doesn't update reproducible call, it's just evaluate function.}

\item{\code{args}}{(\code{NULL} or named \code{list})\cr
additional dynamic arguments to pull dataset. \code{args} will be passed to each
\code{DatasetConnector} object to evaluate \code{CallableFunction} assigned to
this dataset. If \code{args} is null than default set of arguments will be used, otherwise
call will be executed on these arguments only (arguments set before will be ignored).
\code{pull} function doesn't update reproducible call, it's just evaluate function.}

\item{\code{try}}{(\code{logical} value)\cr
whether perform function evaluation inside \code{try} clause}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
(\code{self}) invisibly for chaining. In order to get the data please use \code{get_datasets} method.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-launch"></a>}}
\if{latex}{\out{\hypertarget{method-launch}{}}}
\subsection{Method \code{launch()}}{
Run simple application that uses its \code{ui} and \code{server} fields to pull data from
connection.

Useful for debugging
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RelationalDataConnector$launch()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
An object that represents the app
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-mutate"></a>}}
\if{latex}{\out{\hypertarget{method-mutate}{}}}
\subsection{Method \code{mutate()}}{
Mutate data by code.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RelationalDataConnector$mutate(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{parameters inherited from \code{DataAbstract}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
Informational message to not use mutate_data() with RelationalDataConnectors.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-is_failed"></a>}}
\if{latex}{\out{\hypertarget{method-is_failed}{}}}
\subsection{Method \code{is_failed()}}{
Check if pull or connection has not failed.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RelationalDataConnector$is_failed()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{TRUE} if pull or connection failed, else \code{FALSE}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RelationalDataConnector$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
