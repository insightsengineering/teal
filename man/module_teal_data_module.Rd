% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/1.0_module_teal_transform.R
\name{module_teal_data_module}
\alias{module_teal_data_module}
\alias{ui_teal_data_modules}
\alias{srv_teal_data_modules}
\alias{ui_teal_data_module}
\alias{srv_teal_data_module}
\title{\code{teal_data} transform/load module}
\usage{
ui_teal_data_modules(id, transformers, class = "")

srv_teal_data_modules(id, data, transformers, modules)

ui_teal_data_module(id, transformer)

srv_teal_data_module(
  id,
  data,
  transformer,
  modules = NULL,
  validate_shiny_silent_error = TRUE
)
}
\arguments{
\item{id}{(\code{character(1)}) Module id}

\item{transformers, transformer}{(\verb{list of teal_data_module} or \code{teal_data_module})}

\item{class}{(\code{character}) Additional CSS class for whole wrapper div (optional)}

\item{data}{(\verb{reactive teal_data})}

\item{modules}{(\code{teal_modules} or \code{teal_module}) For \code{datanames} validation purpose}

\item{validate_shiny_silent_error}{(\code{logical(1)})}
}
\value{
\code{reactive} \code{teal_data}
}
\description{
Module consumes \code{teal_data_module} elements and returns validated data:
\itemize{
\item \code{srv/ui_teal_data_module}: executes a single \code{teal_data_module}
\item \code{srv/ui_teal_data_modules} executes multiple \code{teal_data_module} elements successively by passing
output of previous module to the next one.
}
}
\details{
This is a low level module to handle data-loading or data-transformation as in both cases output
is a reactive and validated \code{teal_data}. Data loading can be considered as transformation module
of empty (initial) data object.

Output \code{reactive} \code{teal_data} is validated by \code{\link{validate_reactive_teal_data}}.
Module makes sure that returned data doesn't break an app, so the \code{\link[=.fallback_on_failure]{.fallback_on_failure()}} is
implemented.
}
\keyword{internal}
