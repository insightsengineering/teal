% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/module_init_data.R
\name{module_init_data}
\alias{module_init_data}
\alias{ui_init_data}
\alias{srv_init_data}
\title{Data module for teal}
\usage{
ui_init_data(id, data)

srv_init_data(id, data, modules, filter = teal_slices())
}
\arguments{
\item{id}{(\code{character}) optional
string specifying the \code{shiny} module id in cases it is used as a \code{shiny} module
rather than a standalone \code{shiny} app. This is a legacy feature.}

\item{data}{(\code{teal_data}, \code{teal_data_module} or \code{reactive} returning \code{teal_data})}

\item{modules}{(\code{list} or \code{teal_modules} or \code{teal_module})
nested list of \code{teal_modules} or \code{teal_module} objects or a single
\code{teal_modules} or \code{teal_module} object. These are the specific output modules which
will be displayed in the \code{teal} application. See \code{\link[=modules]{modules()}} and \code{\link[=module]{module()}} for
more details.}

\item{filter}{(\code{teal_slices})
Specifies the initial filter using \code{\link[=teal_slices]{teal_slices()}}.}
}
\value{
A \code{reactive} which returns:
\itemize{
\item \code{teal_data} when the object is validated
\item \code{shiny.silent.error} when not validated.
}
}
\description{
Module handles \code{data} argument to the \code{srv_teal}. \code{teal} uses \code{\link[=teal_data]{teal_data()}} within
the whole framework and it could be provided in several way:
\enumerate{
\item Directly as a \code{\link[teal.data:teal_data]{teal.data::teal_data()}} object. This will be automatically converted
to \code{reactive} \code{teal_data}.
\item As a \code{reactive} object returning \code{\link[teal.data:teal_data]{teal.data::teal_data()}}. \href{#reactive-teal_data}{See section}.
}
}
\section{Reactive \code{teal_data}}{


Data included to the application can be reactively changed and \code{\link[=srv_teal]{srv_teal()}} will rebuild
the content respectively. There are two ways of making interactive \code{teal_data}:
\enumerate{
\item Using a \code{reactive} object passed from outside the \code{teal} application. In this case, reactivity
is controlled by external module and \code{srv_teal} will trigger accordingly to the changes.
\item Using \code{\link[=teal_data_module]{teal_data_module()}} which is embedded in the \code{teal} application and data can be
resubmitted when needed by the user.
}

Since server of \code{\link[=teal_data_module]{teal_data_module()}} must return \code{reactive} \code{teal_data} object, it means that
both scenarios (1) and (2) are having the same effect for the reactivity of a \code{teal} application.
The difference is that in the first case the data is controlled from outside the app and in the
second case the data is controlled from custom module called inside of the app.

see \code{\link{module_teal_data}} for more details.
}

\keyword{internal}
