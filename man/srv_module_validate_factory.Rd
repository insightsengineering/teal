% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/module_validate.R
\name{srv_module_validate_factory}
\alias{srv_module_validate_factory}
\alias{ui_module_validate}
\title{Factory to build validate module server function}
\usage{
srv_module_validate_factory(..., stop_on_first = TRUE)

ui_module_validate(id)
}
\arguments{
\item{...}{(\code{function}) 1 or more \code{\link[shiny:moduleServer]{shiny::moduleServer()}} functions that
return a \code{\link[shiny:reactive]{shiny::reactive()}} with \code{TRUE} or a character string detailing the exception.
It can be a named function, a character string or an anonymous function.}

\item{stop_on_first}{(\code{logical(1)}) If \code{TRUE} (default), only shows the first error.}
}
\value{
A \code{server} function with code generated from the function supplied in the arguments.
}
\description{
Create a module that validates the reactive data.
It dynamically generates a \code{server} function that can be use internally in teal
or in a teal module. The \code{ui} function is generic and common to all modules.
}
\examples{
check_error <- function(x, skip_on_empty_message = TRUE) {
  moduleServer("check_error", function(input, output, session) {
    reactive({
      if (inherits(x(), "error") && (!skip_on_empty_message || !identical(x()$message, ""))) {
        tagList(tags$strong("Error detected"), tags$blockquote(x()$message))
      } else {
        TRUE
      }
    })
  })
}
srv_module_validate_factory(check_error)

check_numeric <- function(x, null.ok = FALSE) {
  moduleServer("check_numeric", function(input, output, session) {
    reactive(checkmate::check_numeric(x(), null.ok = null.ok))
  })
}
srv_module_validate_factory(check_error, check_numeric)
}
\keyword{internal}
