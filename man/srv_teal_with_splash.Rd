% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/module_teal_with_splash.R
\name{srv_teal_with_splash}
\alias{srv_teal_with_splash}
\title{Server function that loads the data through reactive loading and then delegates
to \code{\link[=srv_teal]{srv_teal()}}.}
\usage{
srv_teal_with_splash(id, data, modules, filter = list())
}
\arguments{
\item{id}{(\code{character})\cr
module id to embed it, if provided,
the server function must be called with \code{\link[shiny:moduleServer]{shiny::moduleServer()}};
See the vignette for an example. However, \code{\link[=ui_teal_with_splash]{ui_teal_with_splash()}}
is then preferred to this function.}

\item{data}{(\code{TealData} or \code{TealDataset} or \code{TealDatasetConnector} or \code{list} or \code{data.frame}
or \code{MultiAssayExperiment})\cr
\code{R6} object as returned by \code{\link[teal.data:cdisc_data]{teal.data::cdisc_data()}}, \code{\link[teal.data:teal_data]{teal.data::teal_data()}}, \code{\link[teal.data:cdisc_dataset]{teal.data::cdisc_dataset()}}, \code{\link[teal.data:dataset]{teal.data::dataset()}},
\code{\link[teal.data:dataset_connector]{teal.data::dataset_connector()}} or \code{\link[teal.data:cdisc_dataset_connector]{teal.data::cdisc_dataset_connector()}} or a single \code{data.frame} or a \code{MultiAssayExperiment}
or a list of the previous objects or function returning a named list.
NOTE: teal does not guarantee reproducibility of the code when names of the list elements
do not match the original object names. To ensure reproducibility please use \code{\link[teal.data:teal_data]{teal.data::teal_data()}}
or \code{\link[teal.data:cdisc_data]{teal.data::cdisc_data()}} with \code{check = TRUE} enabled.}

\item{modules}{(\code{list} or \code{teal_modules})\cr
nested list of \code{teal_modules} or \code{module} objects. See \code{\link[=modules]{modules()}} and \code{\link[=module]{module()}} for
more details.}

\item{filter}{(\code{list})\cr
You can define filters that show when the app starts. List names should be
named according to datanames passed to the \code{data} argument.
In case of  data.frame` the list should be composed as follows:

\if{html}{\out{<div class="sourceCode">}}\preformatted{list(<dataname1> = list(<varname1> = ..., <varname2> = ...),
     <dataname2> = list(...),
     ...)

}\if{html}{\out{</div>}}

For example, filters for variable \code{Sepal.Length} in \code{iris} can be specified as
follows:

\if{html}{\out{<div class="sourceCode">}}\preformatted{list(iris = list(Sepal.Length = list(selected = c(5.0, 7.0))))
# or
list(iris = list(Sepal.Length = c(5.0, 7.0)))
}\if{html}{\out{</div>}}

In case developer would like to include \code{NA} and \code{Inf} values in  the
filtered dataset.

\if{html}{\out{<div class="sourceCode">}}\preformatted{list(Species = list(selected = c(5.0, 7.0), keep_na = TRUE, keep_inf = TRUE))
list(Species = c(c(5.0, 7.0), NA, Inf))
}\if{html}{\out{</div>}}

To initialize with specific variable filter with all values on start, one
can use

\if{html}{\out{<div class="sourceCode">}}\preformatted{list(Species = list())
}\if{html}{\out{</div>}}

\code{filter} should be set with respect to the class of the column:
\itemize{
\item \code{numeric}: \code{selected} should be a two elements vector defining the range
of the filter.
\item \code{Date}: \code{selected} should be a two elements vector defining the date-range
of the filter
\item \code{POSIXct}: \code{selected} should be a two elements vector defining the
\code{datetime} range of the filter
\item \code{character} and \code{factor}: \code{selected} should be a vector of any length
defining initial values selected to filter.
\cr
\code{filter} for \code{MultiAssayExperiment} objects should be specified in slightly
different way. Since it contains patient data with list of experiments,
\code{filter} list should be created as follows:
\cr
}

\if{html}{\out{<div class="sourceCode">}}\preformatted{list(
  <MAE dataname> = list(
    subjects = list(<column in colData> = ..., <column in colData> = ...),
    <experiment name> = list(
      subset = list(<column in rowData of experiment> = ...,
                    <column in rowData of experiment> = ...),
      select = list(<column in colData of experiment> = ...,
                    <column in colData of experiment> = ...)
    )
  )
)
}\if{html}{\out{</div>}}

By adding the \code{filterable} attribute it is possible to control which variables can be filtered for each
dataset. See the example below where \code{ADSL} can only be filtered by \code{AGE}, \code{SEX} or \code{RACE}.}
}
\value{
\code{reactive}, return value of \code{\link[=srv_teal]{srv_teal()}}
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#stable}{\figure{lifecycle-stable.svg}{options: alt='[Stable]'}}}{\strong{[Stable]}}
Please also refer to the doc of \code{\link[=init]{init()}}.
}
