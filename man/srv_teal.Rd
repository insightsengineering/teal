% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/module_teal.R
\name{srv_teal}
\alias{srv_teal}
\title{Server function corresponding to teal}
\usage{
srv_teal(id, modules, raw_data, filter = teal_slices())
}
\arguments{
\item{id}{(\code{character})\cr
module id to embed it, if provided,
the server function must be called with \code{\link[shiny:moduleServer]{shiny::moduleServer()}};
See the vignette for an example. However, \code{\link[=ui_teal_with_splash]{ui_teal_with_splash()}}
is then preferred to this function.}

\item{modules}{(\code{list}, \code{teal_modules} or \code{teal_module})\cr
nested list of \code{teal_modules} or \code{teal_module} objects or a single
\code{teal_modules} or \code{teal_module} object. These are the specific output modules which
will be displayed in the teal application. See \code{\link[=modules]{modules()}} and \code{\link[=module]{module()}} for
more details.}

\item{raw_data}{(\code{reactive})\cr
returns the \code{TealData}, only evaluated once, \code{NULL} value is ignored}

\item{filter}{(\code{teal_slices})\cr
Specification of initial filter. Filters can be specified using \code{\link[=teal_slices]{teal_slices()}}.
Old way of specifying filters through a list is deprecated and will be removed in the
next release. Please fix your applications to use \code{\link[=teal_slices]{teal_slices()}}.}
}
\value{
\code{reactive} which returns the currently active module
}
\description{
It evaluates the \code{raw_data} (delayed data mechanism) and creates the
\code{datasets} object that is shared across modules.
Once it is ready and non-\code{NULL}, the splash screen is replaced by the
main teal UI that depends on the data.
The currently active tab is tracked and the right filter panel
updates the displayed datasets to filter for according to the active \code{datanames}
of the tab.
}
\details{
For more doc, see \code{\link[=ui_teal]{ui_teal()}}.
}
\keyword{internal}
