% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/module_nested_tabs.R
\name{srv_nested_tabs}
\alias{srv_nested_tabs}
\alias{srv_nested_tabs.default}
\alias{srv_nested_tabs.teal_modules}
\alias{srv_nested_tabs.teal_module}
\title{Server function that returns currently active module}
\usage{
srv_nested_tabs(
  id,
  datasets,
  modules,
  reporter = teal.reporter::Reporter$new()
)

\method{srv_nested_tabs}{default}(
  id,
  datasets,
  modules,
  reporter = teal.reporter::Reporter$new()
)

\method{srv_nested_tabs}{teal_modules}(
  id,
  datasets,
  modules,
  reporter = teal.reporter::Reporter$new()
)

\method{srv_nested_tabs}{teal_module}(
  id,
  datasets,
  modules,
  reporter = teal.reporter::Reporter$new()
)
}
\arguments{
\item{id}{(\code{character})\cr
module id to embed it, if provided,
the server function must be called with \code{\link[shiny:moduleServer]{shiny::moduleServer()}};
See the vignette for an example. However, \code{\link[=ui_teal_with_splash]{ui_teal_with_splash()}}
is then preferred to this function.}

\item{datasets}{(\code{FilteredData})\cr
object to store filter state and filtered datasets, shared across modules. For more
details see \code{\link[teal.slice:FilteredData]{teal.slice::FilteredData}}.}

\item{modules}{\code{teal_modules} object containing the output modules which
will be displayed in the teal application. See \code{\link[=modules]{modules()}} and \code{\link[=module]{module()}} for
more details.}

\item{reporter}{(\code{Reporter}) object from \code{teal.reporter}}
}
\value{
\code{reactive} which returns the active module that corresponds to the selected tab
}
\description{
Server function that returns currently active module
}
\details{
This module calls recursively all elements of the \code{modules} returns one which
is currently active. \cr
\code{teal_module} returns self as a active module.
\code{teal_modules} also returns module active within self which is determined by the \code{input$active_tab}.
}
\keyword{internal}
