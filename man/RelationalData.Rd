% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RelationalData.R
\name{RelationalData}
\alias{RelationalData}
\title{Manage multiple \code{RelationalDataConnector}, \code{DatasetConnector} and \code{Dataset} objects.}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}}

Class manages \code{RelationalDataConnector}, \code{DatasetConnector} and
\code{Dataset} objects and aggregate them in one collection.
Class also decides whether to launch app before initialize teal application.
}
\examples{
library(scda)
adsl_cf <- callable_function(function() synthetic_cdisc_data("latest")$adsl)
adlb_cf <- callable_function(function() synthetic_cdisc_data("latest")$adlb)
adrs_cf <- callable_function(function() synthetic_cdisc_data("latest")$adrs)
adtte_cf <- callable_function(function() synthetic_cdisc_data("latest")$adtte)
x1 <- cdisc_dataset_connector("ADSL", adsl_cf, keys = get_cdisc_keys("ADSL"))
x2 <- cdisc_dataset_connector("ADRS", adrs_cf, keys = get_cdisc_keys("ADRS"))
x3 <- cdisc_dataset(
  dataname = "ADAE",
  x = synthetic_cdisc_data("latest")$adae,
  code = "library(scda)\nADAE <- synthetic_cdisc_data(\"latest\")$adae"
)
x4 <- cdisc_dataset_connector("ADTTE", adtte_cf, keys = get_cdisc_keys("ADTTE"))
tc <- teal:::RelationalData$new(x1, x2, x3, x4)
tc$get_datanames()
\dontrun{
tc$launch()
get_datasets(tc) # equivalent to tc$get_datasets()
tc$get_dataset("ADAE")
tc$check()
}

x <- cdisc_dataset(
  dataname = "ADSL",
  x = synthetic_cdisc_data("latest")$adsl,
  code = "library(scda)\nADSL <- synthetic_cdisc_data(\"latest\")$adsl"
)

x2 <- cdisc_dataset_connector("ADTTE", adtte_cf, keys = get_cdisc_keys("ADTTE"))
tc <- teal:::RelationalData$new(x, x2)
\dontrun{
# This errors as we have not pulled the data
# tc$get_datasets()
# pull the data and then we can get the datasets
tc$launch()
tc$get_datasets()
get_raw_data(tc)
}

}
\section{Super class}{
\code{\link[teal:DataAbstract]{teal::DataAbstract}} -> \code{RelationalData}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{RelationalData$new()}}
\item \href{#method-copy}{\code{RelationalData$copy()}}
\item \href{#method-print}{\code{RelationalData$print()}}
\item \href{#method-get_datanames}{\code{RelationalData$get_datanames()}}
\item \href{#method-get_join_keys}{\code{RelationalData$get_join_keys()}}
\item \href{#method-get_connectors}{\code{RelationalData$get_connectors()}}
\item \href{#method-get_items}{\code{RelationalData$get_items()}}
\item \href{#method-get_ui}{\code{RelationalData$get_ui()}}
\item \href{#method-get_server}{\code{RelationalData$get_server()}}
\item \href{#method-launch}{\code{RelationalData$launch()}}
\item \href{#method-mutate_join_keys}{\code{RelationalData$mutate_join_keys()}}
\item \href{#method-check_metadata}{\code{RelationalData$check_metadata()}}
\item \href{#method-clone}{\code{RelationalData$clone()}}
}
}
\if{html}{
\out{<details ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="teal" data-topic="DataAbstract" data-id="check">}\href{../../teal/html/DataAbstract.html#method-check}{\code{teal::DataAbstract$check()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="teal" data-topic="DataAbstract" data-id="check_reproducibility">}\href{../../teal/html/DataAbstract.html#method-check_reproducibility}{\code{teal::DataAbstract$check_reproducibility()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="teal" data-topic="DataAbstract" data-id="execute_mutate">}\href{../../teal/html/DataAbstract.html#method-execute_mutate}{\code{teal::DataAbstract$execute_mutate()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="teal" data-topic="DataAbstract" data-id="get_check_result">}\href{../../teal/html/DataAbstract.html#method-get_check_result}{\code{teal::DataAbstract$get_check_result()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="teal" data-topic="DataAbstract" data-id="get_code">}\href{../../teal/html/DataAbstract.html#method-get_code}{\code{teal::DataAbstract$get_code()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="teal" data-topic="DataAbstract" data-id="get_code_class">}\href{../../teal/html/DataAbstract.html#method-get_code_class}{\code{teal::DataAbstract$get_code_class()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="teal" data-topic="DataAbstract" data-id="get_dataset">}\href{../../teal/html/DataAbstract.html#method-get_dataset}{\code{teal::DataAbstract$get_dataset()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="teal" data-topic="DataAbstract" data-id="get_datasets">}\href{../../teal/html/DataAbstract.html#method-get_datasets}{\code{teal::DataAbstract$get_datasets()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="teal" data-topic="DataAbstract" data-id="is_pulled">}\href{../../teal/html/DataAbstract.html#method-is_pulled}{\code{teal::DataAbstract$is_pulled()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="teal" data-topic="DataAbstract" data-id="mutate">}\href{../../teal/html/DataAbstract.html#method-mutate}{\code{teal::DataAbstract$mutate()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="teal" data-topic="DataAbstract" data-id="mutate_dataset">}\href{../../teal/html/DataAbstract.html#method-mutate_dataset}{\code{teal::DataAbstract$mutate_dataset()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="teal" data-topic="DataAbstract" data-id="reassign_datasets_vars">}\href{../../teal/html/DataAbstract.html#method-reassign_datasets_vars}{\code{teal::DataAbstract$reassign_datasets_vars()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="teal" data-topic="DataAbstract" data-id="set_check">}\href{../../teal/html/DataAbstract.html#method-set_check}{\code{teal::DataAbstract$set_check()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="teal" data-topic="DataAbstract" data-id="set_pull_code">}\href{../../teal/html/DataAbstract.html#method-set_pull_code}{\code{teal::DataAbstract$set_pull_code()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Create a new object of \code{RelationalData} class
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RelationalData$new(..., check = FALSE, join_keys)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{(\code{RelationalDataConnector}, \code{Dataset}, \code{DatasetConnector})\cr
objects}

\item{\code{check}}{(\code{logical}) reproducibility check - whether evaluated preprocessing code gives the same objects
as provided in arguments. Check is run only if flag is true and preprocessing code is not empty.}

\item{\code{join_keys}}{(\code{JoinKeys}) or a single (\code{JoinKeySet})\cr
(optional) object with dataset column relationships used for joining.
If empty then no joins between pairs of objects}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-copy"></a>}}
\if{latex}{\out{\hypertarget{method-copy}{}}}
\subsection{Method \code{copy()}}{
Creates a copy of the object with keeping valid references
between \code{Dataset} and \code{DatasetConnector} objects
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RelationalData$copy(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{(\code{logical(1)})\cr
argument passed to \code{clone} method. If \code{TRUE} deep copy is made}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
self invisible
Prints this RelationalData.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-print"></a>}}
\if{latex}{\out{\hypertarget{method-print}{}}}
\subsection{Method \code{print()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RelationalData$print(...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{...}}{additional arguments to the printing method}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
invisibly self
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_datanames"></a>}}
\if{latex}{\out{\hypertarget{method-get_datanames}{}}}
\subsection{Method \code{get_datanames()}}{
Derive the names of all datasets
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RelationalData$get_datanames()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
(\code{character} vector) with names
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_join_keys"></a>}}
\if{latex}{\out{\hypertarget{method-get_join_keys}{}}}
\subsection{Method \code{get_join_keys()}}{
Get \code{JoinKeys} object with keys used for joining.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RelationalData$get_join_keys()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
(\code{JoinKeys})
Get data connectors.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_connectors"></a>}}
\if{latex}{\out{\hypertarget{method-get_connectors}{}}}
\subsection{Method \code{get_connectors()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RelationalData$get_connectors()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
(\code{list}) with all \code{DatasetConnector} or \code{RelationalDataConnector} objects.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_items"></a>}}
\if{latex}{\out{\hypertarget{method-get_items}{}}}
\subsection{Method \code{get_items()}}{



Get all datasets and all dataset connectors

name of dataset connector to be returned. If \code{NULL}, all connectors are returned.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RelationalData$get_items(dataname = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dataname}}{(\code{character} value)\cr}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{list} with all datasets and all connectors
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_ui"></a>}}
\if{latex}{\out{\hypertarget{method-get_ui}{}}}
\subsection{Method \code{get_ui()}}{
Get a shiny-module UI to render the necessary app to
derive \code{RelationalDataConnector} object's data
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RelationalData$get_ui(id)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{(\code{character}) item ID for the shiny module}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the \code{shiny} \code{ui} function
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_server"></a>}}
\if{latex}{\out{\hypertarget{method-get_server}{}}}
\subsection{Method \code{get_server()}}{
Get a shiny-module server to render the necessary app to
derive \code{RelationalDataConnector} object's data
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RelationalData$get_server()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{shiny} \code{server} module.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-launch"></a>}}
\if{latex}{\out{\hypertarget{method-launch}{}}}
\subsection{Method \code{launch()}}{
Launch an app that allows to run the user-interfaces of all
\code{DataConnector} and \code{DatasetConnector} modules

This piece is mainly used for debugging.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RelationalData$launch()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-mutate_join_keys"></a>}}
\if{latex}{\out{\hypertarget{method-mutate_join_keys}{}}}
\subsection{Method \code{mutate_join_keys()}}{
Change join_keys for a given pair of dataset names
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RelationalData$mutate_join_keys(dataset_1, dataset_2, val)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dataset_1, dataset_2}}{(\code{character}) datasets for which join_keys are to be returned}

\item{\code{val}}{(named \code{character}) column names used to join}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
(\code{self}) invisibly for chaining
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-check_metadata"></a>}}
\if{latex}{\out{\hypertarget{method-check_metadata}{}}}
\subsection{Method \code{check_metadata()}}{
Check there is consistency between the datasets and join_keys
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RelationalData$check_metadata()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
raise and error or invisible \code{TRUE}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{RelationalData$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
