% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/FilteredData.R
\docType{class}
\name{FilteredData}
\alias{FilteredData}
\title{Class to encapsulate filtered datasets}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}}
}
\details{
The main purpose of this class is to provide a collection of reactive datasets,
each dataset having a filter state that determines how it is filtered.

For each dataset, \code{get_filter_expr} returns the call to filter the dataset according
to the filter state. The data itself can be obtained through \code{get_data}.
Other classes take care of actually merging together all the datasets.

The datasets are filtered lazily, i.e. only when requested / needed in a Shiny app.

By design, any dataname set through \code{set_data} cannot be removed because
other code may already depend on it. As a workaround, the underlying
data can be set to \code{NULL}.

The class currently supports variables of the following types within datasets:
\itemize{
\item \code{choices}: variable of type \code{factor}, e.g. \code{ADSL$COUNTRY}, \code{iris$Species}
zero or more options can be selected, when the variable is a factor
\item \code{logical}: variable of type \code{logical}, e.g. \code{ADSL$TRT_FLAG}
exactly one option must be selected, \code{TRUE} or \code{FALSE}
\item \code{ranges}: variable of type \code{numeric}, e.g. \code{ADSL$AGE}, \code{iris$Sepal.Length}
numerical range, a range within this range can be selected
\item \code{dates}: variable of type \code{Date}, \code{POSIXlt}
Other variables cannot be used for filtering the data in this class.
}

Common arguments are:
\enumerate{
\item \code{filtered}: whether to return a filtered result or not
\item \code{dataname}: the name of one of the datasets in this \code{FilteredData}
\item \code{varname}: one of the columns in a dataset
}
}
\examples{
library(shiny)
datasets <- teal:::FilteredData$new()

# setting the data
datasets$set_dataset(dataset("iris", iris))
datasets$set_dataset(dataset("mtcars", mtcars))

isolate({
  datasets$datanames()
  datasets$get_filter_overview("iris")

  # filters dataset to obtain information
  datasets$get_filter_overview("mtcars")

  print(datasets$get_call("iris"))
  print(datasets$get_call("mtcars"))

  df <- datasets$get_data("iris", filtered = FALSE)
  print(df)
 })


filter_state_iris <- teal:::init_filter_state(
  iris$Species,
  varname = "Species",
  varlabel = "Species name",
  input_dataname = as.name("iris"),
  extract_type = "list"
)
filter_state_iris$set_selected("virginica")

queue <- datasets$get_filtered_dataset("iris")$get_filter_states(1)
queue$queue_push(filter_state_iris, queue_index = 1L, element_id = "virginica")

isolate(datasets$get_call("iris"))


filter_state_mtcars <- teal:::init_filter_state(
  mtcars$mpg,
  varname = "mpg",
  varlabel = "Miles per galon",
  input_dataname = as.name("mpg"),
  extract_type = "list"
)
filter_state_mtcars$set_selected(c(15, 20))

queue <- datasets$get_filtered_dataset("mtcars")$get_filter_states("filter")
queue$queue_push(filter_state_mtcars, queue_index = 1L, element_id = "mpg")

isolate(datasets$get_call("iris"))
isolate(datasets$get_call("mtcars"))
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{FilteredData$new()}}
\item \href{#method-datanames}{\code{FilteredData$datanames()}}
\item \href{#method-get_datalabel}{\code{FilteredData$get_datalabel()}}
\item \href{#method-get_filterable_datanames}{\code{FilteredData$get_filterable_datanames()}}
\item \href{#method-get_filterable_varnames}{\code{FilteredData$get_filterable_varnames()}}
\item \href{#method-get_call}{\code{FilteredData$get_call()}}
\item \href{#method-get_code}{\code{FilteredData$get_code()}}
\item \href{#method-get_filtered_dataset}{\code{FilteredData$get_filtered_dataset()}}
\item \href{#method-get_data}{\code{FilteredData$get_data()}}
\item \href{#method-get_data_attr}{\code{FilteredData$get_data_attr()}}
\item \href{#method-get_join_keys}{\code{FilteredData$get_join_keys()}}
\item \href{#method-get_filter_overview}{\code{FilteredData$get_filter_overview()}}
\item \href{#method-get_keys}{\code{FilteredData$get_keys()}}
\item \href{#method-get_varlabels}{\code{FilteredData$get_varlabels()}}
\item \href{#method-get_varnames}{\code{FilteredData$get_varnames()}}
\item \href{#method-handle_active_datanames}{\code{FilteredData$handle_active_datanames()}}
\item \href{#method-set_dataset}{\code{FilteredData$set_dataset()}}
\item \href{#method-set_code}{\code{FilteredData$set_code()}}
\item \href{#method-get_bookmark_state}{\code{FilteredData$get_bookmark_state()}}
\item \href{#method-set_bookmark_state}{\code{FilteredData$set_bookmark_state()}}
\item \href{#method-restore_state_from_bookmark}{\code{FilteredData$restore_state_from_bookmark()}}
\item \href{#method-ui_filter_panel}{\code{FilteredData$ui_filter_panel()}}
\item \href{#method-srv_filter_panel}{\code{FilteredData$srv_filter_panel()}}
\item \href{#method-ui_filter_overview}{\code{FilteredData$ui_filter_overview()}}
\item \href{#method-srv_filter_overview}{\code{FilteredData$srv_filter_overview()}}
\item \href{#method-clone}{\code{FilteredData$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Initialize a \code{FilteredData} object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FilteredData$new()}\if{html}{\out{</div>}}
}

}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-datanames"></a>}}
\if{latex}{\out{\hypertarget{method-datanames}{}}}
\subsection{Method \code{datanames()}}{
Gets datanames

The datanames are returned in the order in which they must be
evaluated (in case of dependencies).
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FilteredData$datanames()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
(\code{character} vector) of datanames
Gets data label for the dataset

Useful to display in \verb{Show R Code}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_datalabel"></a>}}
\if{latex}{\out{\hypertarget{method-get_datalabel}{}}}
\subsection{Method \code{get_datalabel()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FilteredData$get_datalabel(dataname)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dataname}}{(\code{character}) name of the dataset}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
(\code{character}) keys of dataset
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_filterable_datanames"></a>}}
\if{latex}{\out{\hypertarget{method-get_filterable_datanames}{}}}
\subsection{Method \code{get_filterable_datanames()}}{
Gets dataset names of a given dataname for the filtering.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FilteredData$get_filterable_datanames(dataname)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dataname}}{(\code{character} vector) names of the dataset}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
(\code{character} vector) of dataset names
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_filterable_varnames"></a>}}
\if{latex}{\out{\hypertarget{method-get_filterable_varnames}{}}}
\subsection{Method \code{get_filterable_varnames()}}{
Gets variable names of a given dataname for the filtering.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FilteredData$get_filterable_varnames(dataname)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dataname}}{(\code{character}) name of the dataset}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
(\code{character} vector) of variable names
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_call"></a>}}
\if{latex}{\out{\hypertarget{method-get_call}{}}}
\subsection{Method \code{get_call()}}{
Gets a \code{call} to filter the dataset according to the filter state

It returns a \code{call} to filter the dataset only, assuming the
other (filtered) datasets it depends on are available.

Together with \code{self$datanames()} which returns the datasets in the correct
evaluation order, this generates the whole filter code, see the function
\code{FilteredData$get_filter_code}.

For the return type, note that \code{rlang::is_expression} returns \code{TRUE} on the
return type, both for base R expressions and calls (single expression,
capturing a function call).

The filtered dataset has the name given by \code{self$filtered_dataname(dataname)}

This can be used for the \verb{Show R Code} generation.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FilteredData$get_call(dataname)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dataname}}{(\code{character}) name of the dataset}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
(\code{call} or \code{list} of calls) to filter dataset
calls
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_code"></a>}}
\if{latex}{\out{\hypertarget{method-get_code}{}}}
\subsection{Method \code{get_code()}}{
Gets the R preprocessing code string that generates the unfiltered datasets
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FilteredData$get_code(dataname = self$datanames())}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dataname}}{(\code{character}) name(s) of dataset(s)}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
(\code{character}) deparsed code
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_filtered_dataset"></a>}}
\if{latex}{\out{\hypertarget{method-get_filtered_dataset}{}}}
\subsection{Method \code{get_filtered_dataset()}}{
Gets \code{FilteredDataset} object which contains all informations
related to specific dataset.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FilteredData$get_filtered_dataset(dataname = character(0))}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dataname}}{(\code{character(1)})\cr
name of the dataset.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{FilteredDataset} object or list of \code{FilteredDataset}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_data"></a>}}
\if{latex}{\out{\hypertarget{method-get_data}{}}}
\subsection{Method \code{get_data()}}{
Gets filtered or unfiltered dataset

For \code{filtered = FALSE}, the original data set with
\code{set_data} is returned including all attributes.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FilteredData$get_data(dataname, filtered = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dataname}}{(\code{character}) name of the dataset}

\item{\code{filtered}}{(\code{logical}) whether to return a filtered or unfiltered dataset}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_data_attr"></a>}}
\if{latex}{\out{\hypertarget{method-get_data_attr}{}}}
\subsection{Method \code{get_data_attr()}}{
Gets data attributes for a given dataset

Sets and gets the data attribute on unfiltered data as it is never modified
as attributes.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FilteredData$get_data_attr(dataname, attr)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dataname}}{(\code{character}) name of the dataset}

\item{\code{attr}}{(\code{character}) attribute to get from the data attributes of the dataset}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
value of attribute, may be \code{NULL} if it does not exist
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_join_keys"></a>}}
\if{latex}{\out{\hypertarget{method-get_join_keys}{}}}
\subsection{Method \code{get_join_keys()}}{
Get join keys between two datasets.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FilteredData$get_join_keys(dataset_1, dataset_2)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dataset_1}}{(\code{character}) one dataset name}

\item{\code{dataset_2}}{(\code{character}) other dataset name}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
(\verb{named character}) vector with column names
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_filter_overview"></a>}}
\if{latex}{\out{\hypertarget{method-get_filter_overview}{}}}
\subsection{Method \code{get_filter_overview()}}{
Get filter overview table in form of X (filtered) / Y (non-filtered)

This is intended to be presented in the application.
The content for each of the data names is defined in \code{get_filter_overview_info} method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FilteredData$get_filter_overview(datanames)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{datanames}}{(\code{character} vector) names of the dataset}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
(\code{matrix}) matrix of observations and subjects of all datasets
Get keys for the dataset
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_keys"></a>}}
\if{latex}{\out{\hypertarget{method-get_keys}{}}}
\subsection{Method \code{get_keys()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FilteredData$get_keys(dataname)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dataname}}{(\code{character}) name of the dataset}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
(\code{character}) keys of dataset
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_varlabels"></a>}}
\if{latex}{\out{\hypertarget{method-get_varlabels}{}}}
\subsection{Method \code{get_varlabels()}}{
Gets labels of variables in the data

Variables are the column names of the data.
Either, all labels must have been provided for all variables
in \code{set_data} or \code{NULL}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FilteredData$get_varlabels(dataname, variables = NULL)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dataname}}{(\code{character}) name of the dataset}

\item{\code{variables}}{(\code{character} vector) variables to get labels for;
if \code{NULL}, for all variables in data}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
(\code{character} or \code{NULL}) variable labels, \code{NULL} if \code{column_labels}
attribute does not exist for the data
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_varnames"></a>}}
\if{latex}{\out{\hypertarget{method-get_varnames}{}}}
\subsection{Method \code{get_varnames()}}{
Gets variable names
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FilteredData$get_varnames(dataname)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dataname}}{(\code{character}) the name of the dataset}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
(\code{character} vector) of variable names
When active_datanames is "all", sets them to all datanames
otherwise, it makes sure that it is a subset of the available datanames
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-handle_active_datanames"></a>}}
\if{latex}{\out{\hypertarget{method-handle_active_datanames}{}}}
\subsection{Method \code{handle_active_datanames()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FilteredData$handle_active_datanames(datanames)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{datanames}}{\verb{character vector} datanames to pick}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
the intersection of \code{self$datanames()} and \code{datanames}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set_dataset"></a>}}
\if{latex}{\out{\hypertarget{method-set_dataset}{}}}
\subsection{Method \code{set_dataset()}}{
Adds a \code{TealDataset} object to this \code{FilteredData}

Adds a dataset and preserve all attributes attached to this object.
Technically \code{set_dataset} created \code{FilteredDataset} which keeps
\code{dataset} for filtering purpose.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FilteredData$set_dataset(dataset)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{dataset}}{(\code{TealDataset} or \code{TealDatasetConnector})\cr
the object containing data and attributes.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
(\code{self}) invisibly this \code{FilteredTealData}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set_code"></a>}}
\if{latex}{\out{\hypertarget{method-set_code}{}}}
\subsection{Method \code{set_code()}}{
Sets the R preprocessing code for single dataset
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FilteredData$set_code(code)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{code}}{\code{CodeClass} preprocessing code that can be parsed to generate the
unfiltered datasets}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
(\code{self})
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_bookmark_state"></a>}}
\if{latex}{\out{\hypertarget{method-get_bookmark_state}{}}}
\subsection{Method \code{get_bookmark_state()}}{
Returns the state to be bookmarked

hash sums of \code{datasets}, \code{FilterState} selections and \code{preproc_code}
are bookmarked.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FilteredData$get_bookmark_state()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
named list
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set_bookmark_state"></a>}}
\if{latex}{\out{\hypertarget{method-set_bookmark_state}{}}}
\subsection{Method \code{set_bookmark_state()}}{
Sets a bookmarked state
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FilteredData$set_bookmark_state(id, state)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{(\code{character(1)})\cr
an ID string that corresponds with the ID used to call the module's UI function.}

\item{\code{state}}{(\verb{named list})\cr
nested list of filter selections applied to datasets.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{moduleServer} function which returns \code{NULL}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-restore_state_from_bookmark"></a>}}
\if{latex}{\out{\hypertarget{method-restore_state_from_bookmark}{}}}
\subsection{Method \code{restore_state_from_bookmark()}}{
Sets this object from a bookmarked state

Only sets the filter state, does not set the data
and the preprocessing code. The data should already have been set.
Also checks the preprocessing code is identical if provided in the \code{state}.

Since this function is used from the end-user part, its error messages
are more verbose. We don't call the Shiny modals from here because this
class may be used outside of a Shiny app.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FilteredData$restore_state_from_bookmark(state, check_data_hash = TRUE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{state}}{(\verb{named list})\cr
containing fields \code{data_hash}, \code{filter_states}
and \code{preproc_code}.}

\item{\code{check_data_hash}}{(\code{logical}) whether to check that \code{md5sums} agree
for the data; may not make sense with randomly generated data per session
Module for the right filter panel in the teal app
with a filter overview panel and a filter variable panel.

This panel contains info about the number of observations left in
the (active) datasets and allows to filter the datasets.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ui_filter_panel"></a>}}
\if{latex}{\out{\hypertarget{method-ui_filter_panel}{}}}
\subsection{Method \code{ui_filter_panel()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FilteredData$ui_filter_panel(id)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{(\code{character(1)})\cr
module id
Server function for filter panel}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-srv_filter_panel"></a>}}
\if{latex}{\out{\hypertarget{method-srv_filter_panel}{}}}
\subsection{Method \code{srv_filter_panel()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FilteredData$srv_filter_panel(id, active_datanames = function() "all")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{(\code{character(1)})\cr
an ID string that corresponds with the ID used to call the module's UI function.}

\item{\code{active_datanames}}{\verb{function / reactive} returning datanames that
should be shown on the filter panel,
must be a subset of the \code{datanames} argument provided to \code{ui_filter_panel};
if the function returns \code{NULL} (as opposed to \code{character(0)}), the filter
panel will be hidden}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{moduleServer} function which returns \code{NULL}
Creates the UI for the module showing counts for each dataset
contrasting the filtered to the full unfiltered dataset

Per dataset, it displays
the number of rows/observations in each dataset,
the number of unique subjects.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ui_filter_overview"></a>}}
\if{latex}{\out{\hypertarget{method-ui_filter_overview}{}}}
\subsection{Method \code{ui_filter_overview()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FilteredData$ui_filter_overview(id)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{module id
Server function to display the number of records in the filtered and unfiltered
data}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-srv_filter_overview"></a>}}
\if{latex}{\out{\hypertarget{method-srv_filter_overview}{}}}
\subsection{Method \code{srv_filter_overview()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FilteredData$srv_filter_overview(id, active_datanames = function() "all")}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{(\code{character(1)})\cr
an ID string that corresponds with the ID used to call the module's UI function.}

\item{\code{active_datanames}}{(\code{function}, \code{reactive})\cr
returning datanames that should be shown on the filter panel,
must be a subset of the \code{datanames} argument provided to \code{ui_filter_panel};
if the function returns \code{NULL} (as opposed to \code{character(0)}), the filter
panel will be hidden.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{moduleServer} function which returns \code{NULL}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FilteredData$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
