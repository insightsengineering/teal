% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/modify_reactive_output.R
\name{modify_reactive_output}
\alias{modify_reactive_output}
\title{Modify Reactive Outputs of a \code{teal} Module}
\usage{
modify_reactive_output(teal_module, fun = function(data) data)
}
\arguments{
\item{teal_module}{(\code{teal_module})}

\item{...}{Named arguments where each name corresponds to an output element
(e.g., a reactive expression or a static value) returned by the
\code{teal_module}'s server function. The value for each named argument must be a
function that takes the original output's value as its single argument and
returns the modified value. If the original output is a reactive, its
resolved value is passed to the modifying function, and the modifying
function's result is wrapped in a new reactive.}
}
\value{
A new \code{teal_module} object with the modified server logic and a UI
that internally namespaces the original UI. The new module will have the
same label, datanames, server_args, ui_args, and transformators as the
original \code{teal_module}.
}
\description{
This function takes a \code{teal_module} object and allows modification of its
server's reactive outputs. It wraps the original module's server,
applying specified functions to one or more of the outputs returned by the
original server.

The original server logic is called within a new server function.
The transformations are applied to the outputs of the original server
before they are returned by the new server.
}
