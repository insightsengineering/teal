% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Callable.R
\name{Callable}
\alias{Callable}
\title{A \code{Callable} class of objects

Object that stores function name with its arguments. Methods to get call and run it.}
\description{
A \code{Callable} class of objects

Object that stores function name with its arguments. Methods to get call and run it.

A \code{Callable} class of objects

Object that stores function name with its arguments. Methods to get call and run it.
}
\keyword{internal}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{Callable$new()}}
\item \href{#method-assign_to_env}{\code{Callable$assign_to_env()}}
\item \href{#method-run}{\code{Callable$run()}}
\item \href{#method-is_failed}{\code{Callable$is_failed()}}
\item \href{#method-get_error_message}{\code{Callable$get_error_message()}}
\item \href{#method-clone}{\code{Callable$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Create a new \code{CallableCode} object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Callable$new(env)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{env}}{(\code{environment})\cr
environment where the call will be evaluated}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
new \code{CallableCode} object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-assign_to_env"></a>}}
\if{latex}{\out{\hypertarget{method-assign_to_env}{}}}
\subsection{Method \code{assign_to_env()}}{
Assigns \code{x <- value} object to \code{env}. Assigned object can't
be modified within local environment as it will be locked by using
\code{lockBinding}. This also means that this object can't be reassigned
which will throw an error.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Callable$assign_to_env(x, value)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x}}{(\code{character} value)\cr
name of the variable in class environment}

\item{\code{value}}{(\code{data.frame})\cr
object to be assigned to \code{x}}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
(\code{self}) invisibly for chaining.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-run"></a>}}
\if{latex}{\out{\hypertarget{method-run}{}}}
\subsection{Method \code{run()}}{
Execute \code{Callable} function or code.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Callable$run(return = TRUE, args = NULL, try = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{return}}{(\code{logical} value)\cr
whether to return an object}

\item{\code{args}}{(\code{NULL} or named \code{list})\cr
supplied for callable functions only, these are dynamic arguments passed to function.
Dynamic arguments are executed in this call and are not saved which means that
\code{self$get_call()} won't include them later.}

\item{\code{try}}{(\code{logical} value)\cr
whether perform function evaluation inside \code{try} clause}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
nothing or output from function depending on \code{return}
argument. If \code{run} fails it will return object of class \code{simple-error error}
when \code{try = TRUE} or will stop if \code{try = FALSE}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-is_failed"></a>}}
\if{latex}{\out{\hypertarget{method-is_failed}{}}}
\subsection{Method \code{is_failed()}}{
Check if evaluation of the function has not failed.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Callable$is_failed()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
(\code{logical}) \code{TRUE} if evaluation of the function failed or \code{FALSE}
if evaluation failed or function hasn't yet been called.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_error_message"></a>}}
\if{latex}{\out{\hypertarget{method-get_error_message}{}}}
\subsection{Method \code{get_error_message()}}{
Get error message from last function execution
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Callable$get_error_message()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
(\code{character}) object with error message or \code{character(0)} if last
function evaluation was successful.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{Callable$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
