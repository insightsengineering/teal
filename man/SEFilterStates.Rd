% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/FilterStates.R
\name{SEFilterStates}
\alias{SEFilterStates}
\title{Specialization of \code{FilterStates} for \code{SummaryExperiment}.}
\description{
Specialization of \code{FilterStates} for \code{SummaryExperiment}.

Specialization of \code{FilterStates} for \code{SummaryExperiment}.
}
\keyword{Initialize}
\keyword{`SEFilterStates`}
\keyword{internal}
\keyword{object}
\section{Super class}{
\code{\link[teal:FilterStates]{teal::FilterStates}} -> \code{SEFilterStates}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{SEFilterStates$new()}}
\item \href{#method-server}{\code{SEFilterStates$server()}}
\item \href{#method-get_filter_state}{\code{SEFilterStates$get_filter_state()}}
\item \href{#method-set_filter_state}{\code{SEFilterStates$set_filter_state()}}
\item \href{#method-remove_filter_state}{\code{SEFilterStates$remove_filter_state()}}
\item \href{#method-ui_add_filter_state}{\code{SEFilterStates$ui_add_filter_state()}}
\item \href{#method-srv_add_filter_state}{\code{SEFilterStates$srv_add_filter_state()}}
\item \href{#method-clone}{\code{SEFilterStates$clone()}}
}
}
\if{html}{
\out{<details ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="teal" data-topic="FilterStates" data-id="get_call">}\href{../../teal/html/FilterStates.html#method-get_call}{\code{teal::FilterStates$get_call()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="teal" data-topic="FilterStates" data-id="get_fun">}\href{../../teal/html/FilterStates.html#method-get_fun}{\code{teal::FilterStates$get_fun()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="teal" data-topic="FilterStates" data-id="queue_empty">}\href{../../teal/html/FilterStates.html#method-queue_empty}{\code{teal::FilterStates$queue_empty()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="teal" data-topic="FilterStates" data-id="queue_get">}\href{../../teal/html/FilterStates.html#method-queue_get}{\code{teal::FilterStates$queue_get()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="teal" data-topic="FilterStates" data-id="queue_initialize">}\href{../../teal/html/FilterStates.html#method-queue_initialize}{\code{teal::FilterStates$queue_initialize()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="teal" data-topic="FilterStates" data-id="queue_push">}\href{../../teal/html/FilterStates.html#method-queue_push}{\code{teal::FilterStates$queue_push()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="teal" data-topic="FilterStates" data-id="queue_remove">}\href{../../teal/html/FilterStates.html#method-queue_remove}{\code{teal::FilterStates$queue_remove()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="teal" data-topic="FilterStates" data-id="ui">}\href{../../teal/html/FilterStates.html#method-ui}{\code{teal::FilterStates$ui()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SEFilterStates$new(input_dataname, output_dataname, datalabel)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_dataname}}{(\code{character(1)} or \code{name} or \code{call})\cr
name of the data used on lhs of the expression
specified to the function argument attached to this \code{FilterStates}.}

\item{\code{output_dataname}}{(\code{character(1)} or \code{name} or \code{call})\cr
name of the output data on the lhs of the assignment expression.}

\item{\code{datalabel}}{(\code{character(0)} or \code{character(1)})\cr
text label value.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-server"></a>}}
\if{latex}{\out{\hypertarget{method-server}{}}}
\subsection{Method \code{server()}}{
Server module
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SEFilterStates$server(id)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{(\code{character(1)})\cr
an ID string that corresponds with the ID used to call the module's UI function.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{moduleServer} function which returns \code{NULL}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_filter_state"></a>}}
\if{latex}{\out{\hypertarget{method-get_filter_state}{}}}
\subsection{Method \code{get_filter_state()}}{
Gets the reactive values from the active \code{FilterState} objects.

Gets all active filters from this dataset in form of the nested list.
The output list is a compatible input to \code{self$set_filter_state}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SEFilterStates$get_filter_state()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{list} containing one or two lists  depending on the number of
\code{ReactiveQueue} object (I.e. if \code{rowData} and \code{colData} exist). Each
\code{list} contains elements number equal to number of active filter variables.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set_filter_state"></a>}}
\if{latex}{\out{\hypertarget{method-set_filter_state}{}}}
\subsection{Method \code{set_filter_state()}}{
Set filter state
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SEFilterStates$set_filter_state(data, state, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{data}}{(\code{SummarizedExperiment})\cr
data which are supposed to be filtered.}

\item{\code{state}}{(\verb{named list})\cr
this list should contain \code{subset} and \code{select} element where
each should be a named list containing values as a selection in the \code{FilterState}.
Names of each the \code{list} element in \code{subset} and \code{select} should correspond to
the name of the column in \code{rowData(data)} and \code{colData(data)}.}

\item{\code{...}}{ignored.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{NULL}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-remove_filter_state"></a>}}
\if{latex}{\out{\hypertarget{method-remove_filter_state}{}}}
\subsection{Method \code{remove_filter_state()}}{
Remove a variable from the \code{ReactiveQueue} and its corresponding UI element.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SEFilterStates$remove_filter_state(element_id)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{element_id}}{(\code{character(1)})\cr name of \code{ReactiveQueue} element.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{NULL}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ui_add_filter_state"></a>}}
\if{latex}{\out{\hypertarget{method-ui_add_filter_state}{}}}
\subsection{Method \code{ui_add_filter_state()}}{
Shiny UI module to add filter variable
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SEFilterStates$ui_add_filter_state(id, data)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{(\code{character(1)})\cr
id of shiny module}

\item{\code{data}}{(\code{SummarizedExperiment})\cr
object containing \code{colData} and \code{rowData} which columns
are used to choose filter variables. Column selection from \code{colData}
and \code{rowData} are separate shiny entities.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
shiny.tag
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-srv_add_filter_state"></a>}}
\if{latex}{\out{\hypertarget{method-srv_add_filter_state}{}}}
\subsection{Method \code{srv_add_filter_state()}}{
Shiny server module to add filter variable

Module controls available choices to select as a filter variable.
Selected filter variable is being removed from available choices.
Removed filter variable gets back to available choices.
This module unlike other \code{FilterStates} classes manages two
sets of filter variables - one for \code{colData} and another for
\code{rowData}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SEFilterStates$srv_add_filter_state(id, data, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{(\code{character(1)})\cr
an ID string that corresponds with the ID used to call the module's UI function.}

\item{\code{data}}{(\code{SummarizedExperiment})\cr
object containing \code{colData} and \code{rowData} which columns
are used to choose filter variables. Column selection from \code{colData}
and \code{rowData} are separate shiny entities.}

\item{\code{...}}{ignored}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{moduleServer} function which returns \code{NULL}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{SEFilterStates$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
