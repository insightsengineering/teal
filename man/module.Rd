% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/modules.R
\name{module}
\alias{module}
\alias{format.teal_module}
\alias{print.teal_module}
\title{Creates a \code{teal_module} object}
\usage{
module(
  label = "module",
  server = function(id, ...) {
     moduleServer(id, function(input, output, session) {
 
       })
 },
  ui = function(id, ...) {
     tags$p(paste0("This module has no UI (id: ", id, " )"))

    },
  filters,
  datanames = "all",
  server_args = NULL,
  ui_args = NULL
)

\method{format}{teal_module}(x, indent = 0, ...)

\method{print}{teal_module}(x, ...)
}
\arguments{
\item{label}{(\code{character(1)}) Label shown in the navigation item for the module. Any label possible except
\code{"global_filters"} - read more in \code{mapping} argument of \code{\link{teal_slices}}.}

\item{server}{(\code{function}) \code{shiny} module with following arguments:
\itemize{
\item \code{id} - \code{teal} will set proper \code{shiny} namespace for this module (see \code{\link[shiny:moduleServer]{shiny::moduleServer()}}).
\item \code{input}, \code{output}, \code{session} - (not recommended) then \code{\link[shiny:callModule]{shiny::callModule()}} will be used to call a module.
\item \code{data} (optional) module will receive a \code{teal_data} object, a list of reactive (filtered) data specified in
the \code{filters} argument.
\item \code{datasets} (optional) module will receive \code{FilteredData}. (See \code{\link[teal.slice:FilteredData]{teal.slice::FilteredData}}).
\item \code{reporter} (optional) module will receive \code{Reporter}. (See \code{\link[teal.reporter:Reporter]{teal.reporter::Reporter}}).
\item \code{filter_panel_api} (optional) module will receive \code{FilterPanelAPI}. (See \code{\link[teal.slice:FilterPanelAPI]{teal.slice::FilterPanelAPI}}).
\item \code{...} (optional) \code{server_args} elements will be passed to the module named argument or to the \code{...}.
}}

\item{ui}{(\code{function}) \code{shiny} UI module function with following arguments:
\itemize{
\item \code{id} - \code{teal} will set proper \code{shiny} namespace for this module.
\item \code{...} (optional) \code{ui_args} elements will be passed to the module named argument or to the \code{...}.
}}

\item{filters}{(\code{character}) Deprecated. Use \code{datanames} instead.}

\item{datanames}{(\code{character}) A vector with \code{datanames} that are relevant for the item. The
filter panel will automatically update the shown filters to include only
filters in the listed datasets. \code{NULL} will hide the filter panel,
and the keyword \code{'all'} will show filters of all datasets. \code{datanames} also determines
a subset of datasets which are appended to the \code{data} argument in server function.}

\item{server_args}{(named \code{list}) with additional arguments passed on to the
server function.}

\item{ui_args}{(named \code{list}) with additional arguments passed on to the
UI function.}

\item{x}{(\code{teal_module})}

\item{indent}{(\code{integer}) indent level;
each nested \code{teal_modules} or \code{teal_module} is indented one level more}

\item{...}{arguments passed to other methods.}
}
\value{
object of class \code{teal_module}.
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#stable}{\figure{lifecycle-stable.svg}{options: alt='[Stable]'}}}{\strong{[Stable]}}

This function embeds a \code{shiny} module inside a \code{teal} application. One \code{teal_module} maps to one \code{shiny} module.
}
\examples{
library(shiny)

app <- init(
  data = teal_data(iris = iris),
  modules = list(
    module(
      label = "Module",
      server = function(id, data) {
        moduleServer(
          id,
          module = function(input, output, session) {
            output$data <- renderDataTable(data()[["iris"]])
          }
        )
      },
      ui = function(id) {
        ns <- NS(id)
        tagList(dataTableOutput(ns("data")))
      }
    )
  )
)
if (interactive()) {
  shinyApp(app$ui, app$server)
}
}
