% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/modules.R
\name{module}
\alias{module}
\alias{toString.teal_module}
\alias{print.teal_module}
\title{Creates a module with a new shiny page}
\usage{
module(label, server, ui, filters, server_args = NULL, ui_args = NULL)

\method{toString}{teal_module}(x, indent = 0, ...)

\method{print}{teal_module}(x, ...)
}
\arguments{
\item{label}{(\code{character}) Label shown in the navigation item for the module.}

\item{server}{(\code{function}) Shiny server module function
(see \code{\link[shiny]{callModule}} or \code{\link[shiny]{moduleServer}}).}

\item{ui}{(\code{function}) Shiny ui module function
(see \code{\link[shiny]{callModule}} or \code{\link[shiny]{moduleServer}})
with additional teal-specific \code{datasets} argument.}

\item{filters}{(\code{character}) A vector with datanames that are relevant for the item. The
filter panel will automatically update the shown filters to include only
filters in the listed datasets. \code{NULL} will hide the filter panel,
and the keyword \code{'all'} will show the filters of all datasets. The
argument can be thought of as \code{'active_datanames'} and may be renamed
in future versions of teal.}

\item{server_args}{(\code{list}) Named list with additional arguments passed on to the
server function. Note that the \code{FilteredDatasets} object gets
automatically passed to the server function as arguments \code{datasets}.}

\item{ui_args}{(\code{list}) Named list with additional arguments passed on to the
ui function.}

\item{x}{\code{teal_module}}

\item{indent}{(\code{integer}) indent level;
each submodule is indented one level more}

\item{...}{parameters passed to \code{toString}}
}
\value{
object of class \code{teal_module}.
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#stable}{\figure{lifecycle-stable.svg}{options: alt='[Stable]'}}}{\strong{[Stable]}}
This function embeds a \code{shiny} application inside a \code{teal} application.
}
\examples{
library(shiny)

app <- init(
  data = teal_data(dataset("iris", iris)),
  modules = list(
    module(
      label = "Module",
      server = function(id, datasets) {
        moduleServer(
          id,
          module = function(input, output, session) {
            output$data <- renderDataTable(datasets$get_data("iris"))
          }
        )
      },
      ui = function(id, datasets) {
        ns <- NS(id)
        tagList(dataTableOutput(ns("data")))
      },
      filters = NULL
    )
  )
)
\dontrun{
runApp(app)
}
}
