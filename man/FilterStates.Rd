% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/FilterStates.R
\name{FilterStates}
\alias{FilterStates}
\title{\code{FilterStates} R6 class}
\description{
Implements \code{\link{ReactiveQueue}} to the \code{teal} filters.
Class manages adding and removing \code{FilterState} to the reactive
queue and returns reproducible R expression relevant to specific
\code{FilterStates} subclass.
Currently \code{data.frame}, \code{MultiAssayExperiment},
\code{SummarizedExperiment} and \code{matrix} are available.
}
\note{
throws an exception if the length of \code{x} does not match the length of
\code{element_id}
}
\examples{
library(shiny)
filter_states <- teal:::DFFilterStates$new(
  input_dataname = "data",
  output_dataname = "data_filtered",
  varlabels = c(x = "x variable", SEX = "Sex"),
  datalabel = character(0),
  keys = character(0)
)
filter_state <- teal:::RangeFilterState$new(
  c(NA, Inf, seq(1:10)),
  varname = "x",
  varlabel = "x variable",
  input_dataname = as.name("data"),
  extract_type = "list"
)
isolate(filter_state$set_selected(c(3L, 8L)))

filter_states$queue_push(
  x = filter_state,
  queue_index = 1L,
  element_id = "x"
)
isolate(filter_states$get_call())
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{FilterStates$new()}}
\item \href{#method-get_call}{\code{FilterStates$get_call()}}
\item \href{#method-get_fun}{\code{FilterStates$get_fun()}}
\item \href{#method-queue_empty}{\code{FilterStates$queue_empty()}}
\item \href{#method-queue_get}{\code{FilterStates$queue_get()}}
\item \href{#method-queue_initialize}{\code{FilterStates$queue_initialize()}}
\item \href{#method-queue_push}{\code{FilterStates$queue_push()}}
\item \href{#method-queue_remove}{\code{FilterStates$queue_remove()}}
\item \href{#method-ui}{\code{FilterStates$ui()}}
\item \href{#method-set_bookmark_state}{\code{FilterStates$set_bookmark_state()}}
\item \href{#method-ui_add_filter_state}{\code{FilterStates$ui_add_filter_state()}}
\item \href{#method-srv_add_filter_state}{\code{FilterStates$srv_add_filter_state()}}
\item \href{#method-clone}{\code{FilterStates$clone()}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Initializes this \code{FilterStates} object.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FilterStates$new(input_dataname, output_dataname, datalabel)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{input_dataname}}{(\code{character(1)} or \code{name} or \code{call})\cr
name of the data used on lhs of the expression
specified to the function argument attached to this \code{FilterStates}.}

\item{\code{output_dataname}}{(\code{character(1)} or \code{name} or \code{call})\cr
name of the output data on the lhs of the assignment expression.}

\item{\code{datalabel}}{(\code{character(0)} or \code{character(1)})\cr
text label value.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_call"></a>}}
\if{latex}{\out{\hypertarget{method-get_call}{}}}
\subsection{Method \code{get_call()}}{
Filter call

Makes a subset function call based on condition calls from \code{FilterState}
objects selection.
\code{lhs} of the call is \code{private$output_dataname} and in \code{rhs}
\code{self$get_fun()} with \code{private$input_dataname} as argument and list of
condition calls from \code{FilterState}. If input and output data-names
are the same and no filters applied, method returns \code{NULL} to avoid
no-op call such as \code{x <- x}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FilterStates$get_call()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{call} or \code{NULL}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-get_fun"></a>}}
\if{latex}{\out{\hypertarget{method-get_fun}{}}}
\subsection{Method \code{get_fun()}}{
Gets the name of the function used to filter the data in this FilterStates.

Get function name used to create filter call. By default it's a
"subset" but can be overridden by child class method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FilterStates$get_fun()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
\code{character(1)} the name of the function
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-queue_empty"></a>}}
\if{latex}{\out{\hypertarget{method-queue_empty}{}}}
\subsection{Method \code{queue_empty()}}{
Remove all FilterState objects from all queues in this FilterStates.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FilterStates$queue_empty()}\if{html}{\out{</div>}}
}

\subsection{Returns}{
NULL
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-queue_get"></a>}}
\if{latex}{\out{\hypertarget{method-queue_get}{}}}
\subsection{Method \code{queue_get()}}{
Returns a list of FilterState objects stored in this FilterStates.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FilterStates$queue_get(queue_index, element_id = character(0))}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{queue_index}}{(\code{character(1)}, \code{integer(1)})\cr
index of the \code{private$queue} list where \code{ReactiveQueue} are kept.}

\item{\code{element_id}}{(\code{character(1)})\cr
name of \code{ReactiveQueue} element.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{list} of \code{FilterState} objects
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-queue_initialize"></a>}}
\if{latex}{\out{\hypertarget{method-queue_initialize}{}}}
\subsection{Method \code{queue_initialize()}}{
Sets \code{ReactiveQueue} objects.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FilterStates$queue_initialize(x)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x}}{(\code{list} of \code{ReactiveQueue})\cr
must be a list even if single \code{ReactiveQueue} is set.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-queue_push"></a>}}
\if{latex}{\out{\hypertarget{method-queue_push}{}}}
\subsection{Method \code{queue_push()}}{
Adds a new \code{FilterState} object to this \code{FilterStates}
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FilterStates$queue_push(x, queue_index, element_id)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x}}{(\code{FilterState})\cr
object to be added to the queue}

\item{\code{queue_index}}{(\code{character(1)}, \code{integer(1)})\cr
index of the \code{private$queue} list where \code{ReactiveQueue} are kept.}

\item{\code{element_id}}{(\code{character(1)})\cr
name of the \code{ReactiveQueue} element.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-queue_remove"></a>}}
\if{latex}{\out{\hypertarget{method-queue_remove}{}}}
\subsection{Method \code{queue_remove()}}{
Removes a single filter state

Removes a single filter state with all shiny elements associated
with this state. It removes:\cr
\itemize{
\item particular \code{FilterState} from \code{private$queue}
\item UI card created for this filter
\item observers listening selection and remove button
}
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FilterStates$queue_remove(queue_index, element_id)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{queue_index}}{(\code{character(1)}, \code{logical(1)})\cr
index of the \code{private$queue} list where \code{ReactiveQueue} are kept.}

\item{\code{element_id}}{(\code{character(1)})\cr
name of \code{ReactiveQueue} element.}
}
\if{html}{\out{</div>}}
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ui"></a>}}
\if{latex}{\out{\hypertarget{method-ui}{}}}
\subsection{Method \code{ui()}}{
Shiny UI module

Shiny UI element being a container for \code{FilterState} elements.
Content of this container is created using \code{renderUI} in
\code{server} module
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FilterStates$ui(id)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{(\code{character(1)})\cr
id of the shiny element}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
shiny.tag
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set_bookmark_state"></a>}}
\if{latex}{\out{\hypertarget{method-set_bookmark_state}{}}}
\subsection{Method \code{set_bookmark_state()}}{
Set bookmark state
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FilterStates$set_bookmark_state(id, data, state)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{(\code{character(1)})\cr
an ID string that corresponds with the ID used to call the module's UI function.}

\item{\code{data}}{(\code{data.frame})\cr
data which are supposed to be filtered}

\item{\code{state}}{(\verb{named list})\cr
should contain values which are initial selection in the \code{FilterState}.
Names of the \code{list} element should correspond to the name of the
column in \code{data}.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{moduleServer} function which throws an error
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-ui_add_filter_state"></a>}}
\if{latex}{\out{\hypertarget{method-ui_add_filter_state}{}}}
\subsection{Method \code{ui_add_filter_state()}}{
Shiny UI module to add filter variable.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FilterStates$ui_add_filter_state(id, data)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{(\code{character(1)})\cr
id of shiny module}

\item{\code{data}}{(\code{data.frame}, \code{MultiAssayExperiment}, \code{SummarizedExperiment}, \code{matrix})\cr
object containing columns to be used as filter variables.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
shiny.tag
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-srv_add_filter_state"></a>}}
\if{latex}{\out{\hypertarget{method-srv_add_filter_state}{}}}
\subsection{Method \code{srv_add_filter_state()}}{
Shiny server module to add filter variable
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FilterStates$srv_add_filter_state(id, data, ...)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{id}}{(\code{character(1)})\cr
an ID string that corresponds with the ID used to call the module's UI function.}

\item{\code{data}}{(\code{data.frame}, \code{MultiAssayExperiment}, \code{SummarizedExperiment}, \code{matrix})\cr
object containing columns to be used as filter variables.}

\item{\code{...}}{ignored}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
\code{moduleServer} function which returns \code{NULL}
Module to add \code{FilterState} to queue

This module adds \code{FilterState} object to queue, inserts
shiny UI to the Active Filter Variables, calls \code{FilterState} modules and
create observer to remove state
parameter filter_state (\code{FilterState})

parameter queue_index (\code{character(1)}, \code{logical(1)})\cr
index of the \code{private$queue} list where \code{ReactiveQueue} are kept.
parameter element_id (\code{character(1)})\cr
name of \code{ReactiveQueue} element.
return \code{moduleServer} function which returns \code{NULL}
\code{observeEvent} for remove-filter-state is set and also from \code{FilteredDataset}
level, where shiny-session-namespace is different. That is why it's important
to remove shiny elements from anywhere. In \code{add_filter_state} \code{session$ns(NULL)}
is equivalent to \code{private$ns(queue_index)}. This means that
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{FilterStates$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
