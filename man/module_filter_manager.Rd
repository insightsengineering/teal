% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/module_filter_manager.R
\name{module_filter_manager}
\alias{module_filter_manager}
\alias{filter_manager}
\alias{slices_global}
\alias{ui_filter_manager_panel}
\alias{srv_filter_manager_panel}
\alias{ui_filter_manager}
\alias{srv_filter_manager}
\alias{srv_module_filter_manager}
\alias{.make_slices_global}
\alias{.resolve_global_mapping}
\alias{.filter_module_slices}
\title{Manage multiple \code{FilteredData} objects}
\usage{
ui_filter_manager_panel(id)

srv_filter_manager_panel(id, slices_global)

ui_filter_manager(id)

srv_filter_manager(id, slices_global)

srv_module_filter_manager(id, module_fd, slices_global)

.make_slices_global(filter, module_labels)

.resolve_global_mapping(filter, module_labels)

.filter_module_slices(module_label, slices)
}
\arguments{
\item{id}{(\code{character(1)})
\code{shiny} module instance id.}

\item{slices_global}{(\code{reactiveVal})
containing \code{teal_slices}.}

\item{module_fd}{(\code{FilteredData})
Object containing the data to be filtered in a single \code{teal} module.}

\item{filter}{(\code{teal_slices})
initial \code{teal} filter settings.}
}
\value{
Module returns a \code{slices_global} (\code{reactiveVal}) containing a \code{teal_slices} object with mapping.
}
\description{
Oversee filter states across the entire application.
}
\section{Slices global}{

The key role in this process is played by the single \code{slices_global} (\code{reactiveVal}) object
which stores all \code{teal_slice} objects and mapping to each module.
\code{slices_global} is created by \code{.make_slices_global} function which in the same time resolves
\code{attr("mapping")} to keep it consistent for filter manager:
\itemize{
\item list contains elements named after modules' labels containing \code{id} of active slices. Initially,
app developer can specify mapping for some modules, and \code{make_slices_global} includes unspecified
modules in the mapping list.
\item element \code{global_filters} in the mapping list is removed in favour of module slots.
}
}

\section{Filter manager}{

Filter-manager is split into two parts:
\enumerate{
\item \code{ui/srv_filter_manager_panel} - Called once for the whole app. This module observes changes in
the filters in \code{slices_global} and displays them in a table utilising information from \code{mapping}:
}
\itemize{
\item ‚úÖ (\code{TRUE}) - filter is active in the module
\item ‚ùå (\code{FALSE}) - filter is inactive in the module
\item üî≤ (\code{NA}) - filter is not available in the module
}
\enumerate{
\item \code{ui/srv_module_filter_manager} - Called once for each \code{teal_module}. Handling filter states
for of single module and keeping module \code{FilteredData} consistent with \code{slices_global}, so that
local filters are always reflected in the \code{slices_global} and its mapping and vice versa.
}
}

\keyword{internal}
