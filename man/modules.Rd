% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/modules.R
\name{modules}
\alias{modules}
\alias{toString.teal_modules}
\alias{print.teal_modules}
\title{Creates a \code{teal_modules} object.}
\usage{
modules(..., label = "root")

\method{toString}{teal_modules}(x, indent = 0, ...)

\method{print}{teal_modules}(x, ...)
}
\arguments{
\item{...}{parameters passed to \code{toString}}

\item{label}{(\code{character(1)}) label of modules collection (default \code{"root"}).
If using the \code{label} argument then it must be explicitly named.
For example \code{modules("lab", ...)} should be converted to \code{modules(label = "lab", ...)}}

\item{x}{\code{teal_modules}}

\item{indent}{(\code{integer}) indent level;
each \code{submodule} is indented one level more}
}
\value{
object of class \code{teal_modules}. Object contains following fields
\itemize{
\item \code{label}: taken from the \code{label} argument
\item \code{children}: a list containing objects passed in \code{...}. List elements are named after
their \code{label} attribute converted to a valid \code{shiny} id.
}

(\code{character})
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#stable}{\figure{lifecycle-stable.svg}{options: alt='[Stable]'}}}{\strong{[Stable]}}
This function collects a list of \code{teal_modules} and \code{teal_module} objects and returns a \code{teal_modules} object
containing the passed objects.

This function dictates what modules are included in a \code{teal} application. The internal structure of \code{teal_modules}
shapes the navigation panel of a \code{teal} application.
}
\examples{
library(shiny)

app <- init(
  data = teal_data(dataset("iris", iris)),
  modules = modules(
    label = "Modules",
    modules(
      label = "Module",
      module(
        label = "Inner module",
        server = function(id, data) {
          moduleServer(
            id,
            module = function(input, output, session) {
              output$data <- renderDataTable(data[["iris"]]())
            }
          )
        },
        ui = function(id) {
          ns <- NS(id)
          tagList(dataTableOutput(ns("data")))
        },
        datanames = "all"
      )
    ),
    module(
      label = "Another module",
      server = function(id) {
        moduleServer(
          id,
          module = function(input, output, session) {
            output$text <- renderText("Another module")
          }
        )
      },
      ui = function(id) {
        ns <- NS(id)
        tagList(textOutput(ns("text")))
      },
      datanames = NULL
    )
  )
)
if (interactive()) {
  runApp(app)
}
}
