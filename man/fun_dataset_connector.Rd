% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/DatasetConnector_constructors.R
\name{fun_dataset_connector}
\alias{fun_dataset_connector}
\title{Function Dataset Connector}
\usage{
fun_dataset_connector(
  dataname,
  fun,
  fun_args = NULL,
  keys = character(0),
  label = character(0),
  code = character(0),
  script = character(0),
  func_name = substitute(fun),
  ...
)
}
\arguments{
\item{dataname}{(\code{character})\cr
A given name for the dataset it may not contain spaces}

\item{fun}{(\code{function})\cr
a custom function to obtain dataset.}

\item{fun_args}{(\code{list})\cr
additional arguments for (\code{func}).}

\item{keys}{optional, (\code{character})\cr
vector of dataset primary keys column names}

\item{label}{(\code{character})\cr
Label to describe the dataset.}

\item{code}{(\code{character})\cr
A character string defining code to modify \code{raw_data} from this dataset. To modify
current dataset code should contain at least one assignment to object defined in \code{dataname}
argument. For example if \code{dataname = ADSL} example code should contain
\verb{ADSL <- <some R code>}. Can't be used simultaneously with \code{script}}

\item{script}{(\code{character})\cr
Alternatively to \code{code} - location of the file containing modification code.
Can't be used simultaneously with \code{script}.}

\item{func_name}{(\code{name})\cr
for internal purposes, please keep it default}

\item{...}{(\code{optional})\cr
Additional arguments applied to pull function.
In case when this object code depends on the \code{raw_data} from the other
\code{Dataset}, \code{DatasetConnector} object(s) or other constant value,
this/these object(s) should be included. Please note that \code{vars}
are included to this object as local \code{vars} and they cannot be modified
within another dataset.}
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#experimental}{\figure{lifecycle-experimental.svg}{options: alt='[Experimental]'}}}{\strong{[Experimental]}}
}
\details{
Create a \code{DatasetConnector} from \code{function} and its arguments.
}
\examples{
\dontrun{
my_data <- function(...) {
  # whatever code
  set.seed(1234)
  library(MASS)
  require(dplyr)
  x <- data.frame(
    STUDYID = 1,
    USUBJID = 1:40,
    z = stats::rnorm(40),
    zz = factor(sample(letters[1:3], 40, replace = TRUE)),
    NAs = rep(NA, 40)
  )
  x$w <- as.numeric(MASS::mvrnorm(40, 0, 1))
  x$ww <- as.numeric(MASS::mvrnorm(40, 0, 1))
  rtables::var_labels(x) <- c("STUDYID", "USUBJID", "z", "zz", "NAs", "w", "ww")
  x
}
y <- fun_cdisc_dataset_connector(
  dataname = "ADSL",
  fun = my_data
)

y$get_code()

y$pull()

get_raw_data(y)
}
# Error as global var is used in the function.
# Thus not reproducible.
\dontrun{
x <- 40
my_data <- function(global_var = x) {
  # whatever code
  set.seed(1234)
  library(MASS)
  x <- data.frame(
    STUDYID = 1,
    USUBJID = 1:global_var,
    z = stats::rnorm(40),
    zz = factor(sample(letters[1:3], 40, replace = TRUE)),
    NAs = rep(NA, 40)
  )
  x$w <- as.numeric(MASS::mvrnorm(40, 0, 1))
  x$ww <- as.numeric(MASS::mvrnorm(40, 0, 1))
  rtables::var_labels(x) <- c("STUDYID", "USUBJID", "z", "zz", "NAs", "w", "ww")
  x
}
y <- fun_cdisc_dataset_connector(
  dataname = "ADSL",
  fun = my_data
)

y$pull()
}
# Error - same as previous one
\dontrun{
global_var <- 40
my_data <- function() {
  # whatever code
  set.seed(1234)
  library(MASS)
  x <- data.frame(
    STUDYID = 1,
    USUBJID = 1:global_var,
    z = stats::rnorm(40),
    zz = factor(sample(letters[1:3], 40, replace = TRUE)),
    NAs = rep(NA, 40)
  )
  x$w <- as.numeric(MASS::mvrnorm(40, 0, 1))
  x$ww <- as.numeric(MASS::mvrnorm(40, 0, 1))
  rtables::var_labels(x) <- c("STUDYID", "USUBJID", "z", "zz", "NAs", "w", "ww")
  x
}
y <- fun_cdisc_dataset_connector(
  dataname = "ADSL",
  fun = my_data
)

y$pull()
}
}
