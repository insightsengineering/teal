% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/filtered_data_wrappers.R
\name{filter_state_api}
\alias{filter_state_api}
\alias{set_filter_state}
\alias{get_filter_state}
\alias{remove_filter_state}
\alias{clear_filter_states}
\title{Managing \code{FilteredData} states}
\usage{
set_filter_state(datasets, filter)

get_filter_state(datasets)

remove_filter_state(datasets, filter)

clear_filter_states(datasets)
}
\arguments{
\item{datasets}{(\code{FilteredData})\cr
object to store filter state and filtered datasets, shared across modules. For more
details see \code{\link{FilteredData}}.}

\item{filter}{(\code{list})\cr
You can define filters that show when the app starts. List names should be
named according to datanames passed to the \code{data} argument.
In case of  data.frame` the list should be composed as follows:\preformatted{list(<dataname1> = list(<varname1> = ..., <varname2> = ...),
     <dataname2> = list(...),
     ...)

}

For example, filters for variable \code{Sepal.Length} in \code{iris} can be specified as
follows:\preformatted{list(iris = list(Sepal.Length = list(selected = c(5.0, 7.0))))
# or
list(iris = list(Sepal.Length = c(5.0, 7.0)))
}

In case developer would like to include \code{NA} and \code{Inf} values in  the
filtered dataset.\preformatted{list(Species = list(selected = c(5.0, 7.0), keep_na = TRUE, keep_inf = TRUE))
list(Species = c(c(5.0, 7.0), NA, Inf))
}

To initialize with specific variable filter with all values on start, one
can use\preformatted{list(Species = default_filter())
}

\code{filter} should be set with respect to the class of the column:
\itemize{
\item \code{numeric}: \code{selected} should be a two elements vector defining the range
of the filter.
\item \code{Date}: \code{selected} should be a two elements vector defining the date-range
of the filter
\item \code{POSIXct}: \code{selected} should be a two elements vector defining the
\code{datetime} range of the filter
\item \code{character} and \code{factor}: \code{selected} should be a vector of any length
defining initial values selected to filter.
\cr
\code{MultiAssayExperiment} \code{filter} should be specified in slightly different
way. Since \code{\link[MultiAssayExperiment:MultiAssayExperiment]{MultiAssayExperiment::MultiAssayExperiment()}} contains
patient data (\code{\link[SummarizedExperiment:SummarizedExperiment-class]{SummarizedExperiment::colData()}}) with list of experiments
(\code{\link[MultiAssayExperiment:ExperimentList]{MultiAssayExperiment::ExperimentList()}}), \code{filter} list should be named
in the following name.
\cr
}\preformatted{list(
  <MAE dataname> = list(
    subjects = list(<column in colData> = ..., <column in colData> = ...),
    <experiment name> = list(
      subset = list(<column in rowData of experiment> = ...,
                    <column in rowData of experiment> = ...),
      select = list(<column in colData of experiment> = ...,
                    <column in colData of experiment> = ...)
    )
  )
)
}

\code{filter} is ignored if the app is restored from a bookmarked state.}
}
\value{
\itemize{
\item set, remove and clear returns \code{NULL}
\item get returns named \code{list} of the same structure as described in \code{filter} argument.
}
}
\description{
Set, get and remove filter states of \code{FilteredData} object
}
\examples{
datasets <- teal:::FilteredData$new()
datasets$set_dataset(dataset("iris", iris))
datasets$set_dataset(dataset("mae", MultiAssayExperiment::miniACC))
fs <- list(
  iris = list(
    Sepal.Length = list(selected = c(5.1, 6.4), keep_na = TRUE, keep_inf = FALSE),
    Species = list(selected = c("setosa", "versicolor"), keep_na = FALSE)
  ),
  mae = list(
    subjects = list(
      years_to_birth = list(selected = c(30, 50), keep_na = TRUE, keep_inf = FALSE),
      vital_status = list(selected = "1", keep_na = FALSE),
      gender = list(selected = "female", keep_na = TRUE)
    ),
    RPPAArray = list(
      subset = list(ARRAY_TYPE = list(selected = "", keep_na = TRUE))
    )
  )
)

# set initial filter state
set_filter_state(datasets, filter = fs)

# get filter state
get_filter_state(datasets)

# modify filter state
set_filter_state(
  datasets,
  filter = list(iris = list(Species = list(selected = "setosa", keep_na = TRUE)))
)

# remove specific filters
remove_filter_state(datasets,
  filter = list(
    iris = "Species",
    mae = list(
      subjects = c("years_to_birth", "vital_status")
    )
  )
)

# remove all states
clear_filter_states(datasets)
}
