% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/module_nested_tabs.R
\name{module_teal_modules_nav}
\alias{module_teal_modules_nav}
\alias{ui_teal_module}
\alias{ui_teal_module.default}
\alias{ui_teal_module.teal_modules}
\alias{ui_teal_module.teal_module}
\alias{srv_teal_module}
\alias{srv_teal_module.default}
\alias{srv_teal_module.teal_modules}
\alias{srv_teal_module.teal_module}
\title{Calls all \code{modules}}
\usage{
ui_teal_module(id, modules, active_module_id)

\method{ui_teal_module}{default}(id, modules, active_module_id)

\method{ui_teal_module}{teal_modules}(id, modules, active_module_id)

\method{ui_teal_module}{teal_module}(id, modules, active_module_id)

srv_teal_module(
  id,
  data,
  modules,
  datasets = NULL,
  slices_global,
  reporter = teal.reporter::Reporter$new(),
  data_load_status = reactive("ok"),
  active_module_id = reactive(TRUE)
)

\method{srv_teal_module}{default}(
  id,
  data,
  modules,
  datasets = NULL,
  slices_global,
  reporter = teal.reporter::Reporter$new(),
  data_load_status = reactive("ok"),
  active_module_id = reactive(TRUE)
)

\method{srv_teal_module}{teal_modules}(
  id,
  data,
  modules,
  datasets = NULL,
  slices_global,
  reporter = teal.reporter::Reporter$new(),
  data_load_status = reactive("ok"),
  active_module_id = reactive(TRUE)
)

\method{srv_teal_module}{teal_module}(
  id,
  data,
  modules,
  datasets = NULL,
  slices_global,
  reporter = teal.reporter::Reporter$new(),
  data_load_status = reactive("ok"),
  active_module_id = reactive(TRUE)
)
}
\arguments{
\item{id}{(\code{character(1)}) \code{shiny} module instance id.}

\item{modules}{(\code{teal_modules})
\code{teal_modules} object. These are the specific output modules which
will be displayed in the \code{teal} application. See \code{\link[=modules]{modules()}} and \code{\link[=module]{module()}} for
more details.}

\item{active_module_id}{(\code{reactive} returning \code{character(1)})
\code{id} of the currently active module. This helps to determine which module can listen to reactive events.}

\item{data}{(\code{reactive} returning \code{teal_data})}

\item{datasets}{(\code{reactive} returning \code{FilteredData} or \code{NULL})
When \code{datasets} is passed from the parent module (\code{srv_teal}) then \code{dataset} is a singleton
which implies the filter-panel to be "global". When \code{NULL} then filter-panel is "module-specific".}

\item{slices_global}{(\code{reactiveVal} returning \code{modules_teal_slices})
see \code{\link{module_filter_manager}}}

\item{reporter}{(\code{Reporter}, singleton)
Stores reporter-cards appended in the server of \code{teal_module}.}

\item{data_load_status}{(\code{reactive} returning \code{character(1)})
Determines action dependent on a data loading status:
\itemize{
\item \code{"ok"} when \code{teal_data} is returned from the data loading.
\item \code{"teal_data_module failed"} when \code{\link[=teal_data_module]{teal_data_module()}} didn't return \code{teal_data}. Disables tab buttons.
\item \code{"external failed"} when a \code{reactive} passed to \code{srv_teal(data)} didn't return \code{teal_data}. Hides the whole tab
panel.
}}
}
\value{
Output of currently active module.
\itemize{
\item \code{srv_teal_module.teal_module} returns \code{reactiveVal} containing output of the called module.
\item \code{srv_teal_module.teal_modules} returns output of modules in a list following the hierarchy of \code{modules}
}
}
\description{
Modules are called recursively following the hierarchy of \code{modules} (\code{\link[=teal_modules]{teal_modules()}}). \code{modules} are called
with an \code{id} derived from \code{teal_module}'s label and labels of its ancestors (if any).
Module is not self-contained, it needs \code{\link{module_teal}} to include items into \code{\link[=.teal_navbar]{.teal_navbar()}} and establish
\code{input$active_module_id}.
}
\section{UI}{
UI functions return a list with \code{link}, \code{tab_content} slots which are linked together with the same
reference id. Links contain \verb{href = #<module container id>} attribute which links the click action
with specific module to toggle.
}

\section{Server}{
Server functions return a list of \code{reactiveValues} containing all \code{teal_module}(s) outputs.
List structure follows the same hierarchy as one provided in the \code{modules} argument.
\subsection{Initialization and isolation of the \code{teal_module}(s)}{

Modules are initialized only when they are active. This speeds up app initialization and on
startup only the first module is activated and its outputs are calculated.
Only the active module is listening to reactive events. This way, modules are isolated and only
one can run at any given time. This makes the app more efficient by reducing unnecessary
computations on server side.
}
}

\keyword{internal}
