% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/module_teal.R
\name{ui_teal}
\alias{ui_teal}
\title{Teal app UI}
\usage{
ui_teal(
  id,
  splash_ui = tags$h2("Starting the Teal App"),
  title = NULL,
  header = tags$p(""),
  footer = tags$p("")
)
}
\arguments{
\item{id}{module id}

\item{splash_ui}{\code{shiny.tag} UI to display initially,
can be a splash screen or a Shiny module UI. For the latter, see
\code{\link{init}} about how to call the corresponding server function.}

\item{title}{(\code{character}) The browser window title (defaults to the host URL of the page)}

\item{header}{\verb{shiny.tag or character} header to display above the app}

\item{footer}{\verb{shiny.tag or character} footer to display below the app}
}
\value{
\code{HTML} for Shiny module UI
}
\description{
This is the main teal UI that puts everything together.
}
\details{
It displays the splash UI which is used to fetch the data, possibly
prompting for a password input to fetch the data. Once the data is ready,
the splash screen is replaced by the actual teal UI that is tabsetted and
has a filter panel with datanames that are relevant for the current tab.
Nested tabs are possible, but we limit it to two nesting levels for reasons
of clarity of the UI.

The splash screen functionality can also be used
for non-delayed data which takes time to load into memory, avoiding
Shiny session timeouts.

Bookmarking is supported, i.e. the datasets filter state that this class
is responsible for is stored in and restored from the bookmarked state.

It is written as a Shiny module so it can be added into other apps as well.
}
\examples{
mods <- teal:::get_dummy_modules()
raw_data <- reactive(teal:::get_dummy_cdisc_data())
app <- shinyApp(
  ui = function() {
    teal:::ui_teal("dummy")
  },
  server = function(input, output, session) {
    active_module <- callModule(teal:::srv_teal, "dummy", modules = mods, raw_data = raw_data,
    )
  }
)
\dontrun{
runApp(app)
}
}
