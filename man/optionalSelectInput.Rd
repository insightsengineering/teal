% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/optionalInput.R
\name{optionalSelectInput}
\alias{optionalSelectInput}
\title{Hide, Show Label only or display a \code{pickerInput}}
\usage{
optionalSelectInput(
  inputId,
  label = NULL,
  choices = NULL,
  selected = NULL,
  multiple = FALSE,
  sep = NULL,
  options = list(),
  label_help = NULL,
  fixed = FALSE,
  width = NULL
)
}
\arguments{
\item{inputId}{The \code{input} slot that will be used to access the value.}

\item{label}{Display label for the control, or \code{NULL} for no label.}

\item{choices}{character vector or \code{NULL}. If \code{choices} is
\code{NULL} no \code{pickerInput} widget is displayed and \code{input[[inputId]]}
will be \code{""}. If \code{choices} is of length 1 then a label and
character string will be displayed and the \code{pickerInput} widget will be
hidden. If the length of \code{choices} is more than one the \code{pickerInput}
element will be displayed.
If elements of the list are named then that name rather than the value
is displayed to the user.}

\item{selected}{The initially selected value (or multiple values if \code{multiple = TRUE}).
If not specified then defaults to the first value for single-select lists
 and no values for multiple select lists.}

\item{multiple}{Is selection of multiple items allowed?}

\item{sep}{(\code{character}) A separator string to split the \code{choices} or
\code{selected} inputs into the values of the different columns}

\item{options}{List of options, see \link[shinyWidgets]{pickerOptions} for all available options.
To limit the number of selection possible, see example below.}

\item{label_help}{optional an object of class \code{shiny.tag}. E.g. an object
returned by \code{\link[shiny]{helpText}}}

\item{fixed}{(\code{logical}) (optional) whether to block user to select choices}

\item{width}{(\code{character}) The width of the input passed to \code{pickerInput}
e.g. 'auto', 'fit', '100px' or '75\%'}
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#maturing}{\figure{lifecycle-maturing.svg}{options: alt='[Maturing]'}}}{\strong{[Maturing]}}
Hidden input widgets are useful to have the \code{input[[inputId]]} variable
on available in the server function but no corresponding visual clutter from
input widgets that provide only a single choice.
}
\examples{

optionalSelectInput(inputId = "xvar", label = "x variable", choices = "A", selected = "A")
optionalSelectInput(inputId = "xvar",
                    label = "x variable",
                    choices = LETTERS[1:5],
                     selected = "A")
optionalSelectInput(inputId = "xvar",
                    label = "x variable",
                    choices = c("A - value A" = "A"),
                    selected = "A")

library(scda)
ADRS <- synthetic_cdisc_data("latest")$adrs
optionalSelectInput(inputId = "xvar",
                    label = "x variable",
                    choices = choices_labeled(
                      choices = letters,
                      labels = LETTERS,
                      types = sample(
                        c("primary_key", "numeric", "factor", "Date"),
                        length(letters),
                        TRUE
                      ),
                      subset = c("a", "b", "c")
                    ),
                    selected = "a")
optionalSelectInput(inputId = "xvar",
                    label = "x variable",
                    choices = variable_choices(data = ADRS, subset = c("AGE", "SEX", "PARAMCD")),
                    selected = "PARAMCD")

selected_value <- paste0(lapply(ADRS[1, c("PARAMCD", "AVISIT")], as.character), collapse = " - ")
optionalSelectInput(inputId = "xvar",
                    label = "x variable",
                    choices = value_choices(data = ADRS,
                                            var_choices = c("PARAMCD", "AVISIT"),
                                            var_label = c("PARAM", "AVISIT")),
                    selected = selected_value)

}
