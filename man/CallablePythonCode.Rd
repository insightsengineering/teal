% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/CallablePythonCode.R
\name{CallablePythonCode}
\alias{CallablePythonCode}
\title{A \code{CallablePythonCode} class of objects}
\description{
A \code{CallablePythonCode} class of objects

A \code{CallablePythonCode} class of objects
}
\section{Super classes}{
\code{\link[teal:Callable]{teal::Callable}} -> \code{\link[teal:CallableFunction]{teal::CallableFunction}} -> \code{CallablePythonCode}
}
\section{Methods}{
\subsection{Public methods}{
\itemize{
\item \href{#method-new}{\code{CallablePythonCode$new()}}
\item \href{#method-set_object}{\code{CallablePythonCode$set_object()}}
\item \href{#method-assign_to_env}{\code{CallablePythonCode$assign_to_env()}}
\item \href{#method-run}{\code{CallablePythonCode$run()}}
\item \href{#method-clone}{\code{CallablePythonCode$clone()}}
}
}
\if{html}{
\out{<details ><summary>Inherited methods</summary>}
\itemize{
\item \out{<span class="pkg-link" data-pkg="teal" data-topic="Callable" data-id="get_error_message">}\href{../../teal/html/Callable.html#method-get_error_message}{\code{teal::Callable$get_error_message()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="teal" data-topic="Callable" data-id="is_failed">}\href{../../teal/html/Callable.html#method-is_failed}{\code{teal::Callable$is_failed()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="teal" data-topic="CallableFunction" data-id="get_args">}\href{../../teal/html/CallableFunction.html#method-get_args}{\code{teal::CallableFunction$get_args()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="teal" data-topic="CallableFunction" data-id="get_call">}\href{../../teal/html/CallableFunction.html#method-get_call}{\code{teal::CallableFunction$get_call()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="teal" data-topic="CallableFunction" data-id="set_arg_value">}\href{../../teal/html/CallableFunction.html#method-set_arg_value}{\code{teal::CallableFunction$set_arg_value()}}\out{</span>}
\item \out{<span class="pkg-link" data-pkg="teal" data-topic="CallableFunction" data-id="set_args">}\href{../../teal/html/CallableFunction.html#method-set_args}{\code{teal::CallableFunction$set_args()}}\out{</span>}
}
\out{</details>}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-new"></a>}}
\if{latex}{\out{\hypertarget{method-new}{}}}
\subsection{Method \code{new()}}{
Create a new \code{CallablePythonCode} object
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CallablePythonCode$new(fun)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{fun}}{(\code{function})\cr
function to be evaluated in class. Function should be named}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
new \code{CallablePythonCode} object
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-set_object"></a>}}
\if{latex}{\out{\hypertarget{method-set_object}{}}}
\subsection{Method \code{set_object()}}{
For scripts and code that contain multiple objects, save the name
of the object that corresponds to the final dataset of interest.
This is required for running python scripts with \code{reticulate}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CallablePythonCode$set_object(x)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x}}{(\code{character}) the name of the object produced by the code
or script.}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
(\code{self}) invisibly for chaining.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-assign_to_env"></a>}}
\if{latex}{\out{\hypertarget{method-assign_to_env}{}}}
\subsection{Method \code{assign_to_env()}}{
Assigns \code{x <- value} object to \code{.GlobalEnv}.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CallablePythonCode$assign_to_env(x, value)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{x}}{(\code{character} value)\cr
name of the variable in class environment}

\item{\code{value}}{(\code{data.frame})\cr
object to be assigned to \code{x}}
}
\if{html}{\out{</div>}}
}
\subsection{Details}{
Assignment is done to the global environment. Any variables that
are overwritten are saved in \code{private$duplicate_vars} and restored
after \verb{$run}.
}

\subsection{Returns}{
(\code{self}) invisibly for chaining.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-run"></a>}}
\if{latex}{\out{\hypertarget{method-run}{}}}
\subsection{Method \code{run()}}{
Execute \code{Callable} python code.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CallablePythonCode$run(args = NULL, try = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{args}}{(\code{NULL} or named \code{list})\cr
supplied for callable functions only, these are dynamic arguments passed to
\code{reticulate::py_run_string} or \code{reticulate::py_run_file}. Dynamic arguments
are executed in this call and are not saved which means that \code{self$get_call()}
won't include them later.}

\item{\code{try}}{(\code{logical} value)\cr
whether perform function evaluation inside \code{try} clause}
}
\if{html}{\out{</div>}}
}
\subsection{Returns}{
nothing or output from function depending on \code{return}
argument. If \code{run} fails it will return object of class \code{simple-error} error
when \code{try = TRUE} or will stop if \code{try = FALSE}.
}
}
\if{html}{\out{<hr>}}
\if{html}{\out{<a id="method-clone"></a>}}
\if{latex}{\out{\hypertarget{method-clone}{}}}
\subsection{Method \code{clone()}}{
The objects of this class are cloneable with this method.
\subsection{Usage}{
\if{html}{\out{<div class="r">}}\preformatted{CallablePythonCode$clone(deep = FALSE)}\if{html}{\out{</div>}}
}

\subsection{Arguments}{
\if{html}{\out{<div class="arguments">}}
\describe{
\item{\code{deep}}{Whether to make a deep clone.}
}
\if{html}{\out{</div>}}
}
}
}
