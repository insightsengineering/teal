% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/init.R
\name{init}
\alias{init}
\title{Create the Server and UI Function For the Shiny App}
\usage{
init(
  data,
  modules,
  title = NULL,
  filter = list(),
  header = tags$p(),
  footer = tags$p(),
  id = character(0)
)
}
\arguments{
\item{data}{(\code{TealData} or \code{TealDataset} or \code{TealDatasetConnector} or \code{list} or \code{data.frame}
or \code{MultiAssayExperiment})\cr
\code{R6} object as returned by \code{\link[teal.data:cdisc_data]{teal.data::cdisc_data()}}, \code{\link[teal.data:teal_data]{teal.data::teal_data()}},
\code{\link[teal.data:cdisc_dataset]{teal.data::cdisc_dataset()}}, \code{\link[teal.data:dataset]{teal.data::dataset()}}, \code{\link[teal.data:dataset_connector]{teal.data::dataset_connector()}} or
\code{\link[teal.data:cdisc_dataset_connector]{teal.data::cdisc_dataset_connector()}} or a single \code{data.frame} or a \code{MultiAssayExperiment}
or a list of the previous objects or function returning a named list.
NOTE: teal does not guarantee reproducibility of the code when names of the list elements
do not match the original object names. To ensure reproducibility please use \code{\link[teal.data:teal_data]{teal.data::teal_data()}}
or \code{\link[teal.data:cdisc_data]{teal.data::cdisc_data()}} with \code{check = TRUE} enabled.}

\item{modules}{(\code{list}, \code{teal_modules} or \code{teal_module})\cr
nested list of \code{teal_modules} or \code{teal_module} objects or a single
\code{teal_modules} or \code{teal_module} object. These are the specific output modules which
will be displayed in the teal application. See \code{\link[=modules]{modules()}} and \code{\link[=module]{module()}} for
more details.}

\item{title}{(\code{NULL} or \code{character})\cr
The browser window title (defaults to the host URL of the page).}

\item{filter}{(\code{list})\cr
You can define filters that show when the app starts. List names should be
named according to datanames passed to the \code{data} argument.
In case of  data.frame` the list should be composed as follows:

\if{html}{\out{<div class="sourceCode">}}\preformatted{list(<dataname1> = list(<varname1> = ..., <varname2> = ...),
     <dataname2> = list(...),
     ...)

}\if{html}{\out{</div>}}

For example, filters for variable \code{Sepal.Length} in \code{iris} can be specified as
follows:

\if{html}{\out{<div class="sourceCode">}}\preformatted{list(iris = list(Sepal.Length = list(selected = c(5.0, 7.0))))
# or
list(iris = list(Sepal.Length = c(5.0, 7.0)))
}\if{html}{\out{</div>}}

In case developer would like to include \code{NA} and \code{Inf} values in  the
filtered dataset.

\if{html}{\out{<div class="sourceCode">}}\preformatted{list(Species = list(selected = c(5.0, 7.0), keep_na = TRUE, keep_inf = TRUE))
list(Species = c(c(5.0, 7.0), NA, Inf))
}\if{html}{\out{</div>}}

To initialize with specific variable filter with all values on start, one
can use

\if{html}{\out{<div class="sourceCode">}}\preformatted{list(Species = list())
}\if{html}{\out{</div>}}

\code{filter} should be set with respect to the class of the column:
\itemize{
\item \code{numeric}: \code{selected} should be a two elements vector defining the range
of the filter.
\item \code{Date}: \code{selected} should be a two elements vector defining the date-range
of the filter
\item \code{POSIXct}: \code{selected} should be a two elements vector defining the
\code{datetime} range of the filter
\item \code{character} and \code{factor}: \code{selected} should be a vector of any length
defining initial values selected to filter.
\cr
\code{filter} for \code{MultiAssayExperiment} objects should be specified in slightly
different way. Since it contains patient data with list of experiments,
\code{filter} list should be created as follows:
\cr
}

\if{html}{\out{<div class="sourceCode">}}\preformatted{list(
  <MAE dataname> = list(
    subjects = list(<column in colData> = ..., <column in colData> = ...),
    <experiment name> = list(
      subset = list(<column in rowData of experiment> = ...,
                    <column in rowData of experiment> = ...),
      select = list(<column in colData of experiment> = ...,
                    <column in colData of experiment> = ...)
    )
  )
)
}\if{html}{\out{</div>}}

By adding the \code{filterable} attribute it is possible to control which variables can be filtered for each
dataset. See the example below where \code{ADSL} can only be filtered by \code{AGE}, \code{SEX} or \code{RACE}.}

\item{header}{(\code{shiny.tag} or \code{character}) \cr
the header of the app. Note shiny code placed here (and in the footer
argument) will be placed in the app's \code{ui} function so code which needs to be placed in the \code{ui} function
(such as loading css via \code{\link[htmltools:htmlDependency]{htmltools::htmlDependency()}}) should be included here.}

\item{footer}{(\code{shiny.tag} or \code{character})\cr
the footer of the app}

\item{id}{(\code{character})\cr
module id to embed it, if provided,
the server function must be called with \code{\link[shiny:moduleServer]{shiny::moduleServer()}};
See the vignette for an example. However, \code{\link[=ui_teal_with_splash]{ui_teal_with_splash()}}
is then preferred to this function.}
}
\value{
named list with server and ui function
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#stable}{\figure{lifecycle-stable.svg}{options: alt='[Stable]'}}}{\strong{[Stable]}}
End-users: This is the most important function for you to start a
teal app that is composed out of teal modules.

\strong{Notes for developers}:
This is a wrapper function around the \code{module_teal.R} functions. Unless you are
an end-user, don't use this function, but instead this module.
}
\examples{
new_iris <- transform(iris, id = seq_len(nrow(iris)))
new_mtcars <- transform(mtcars, id = seq_len(nrow(mtcars)))

app <- init(
  data = teal_data(
    dataset("new_iris", new_iris),
    dataset("new_mtcars", new_mtcars),
    code = "
      new_iris <- transform(iris, id = seq_len(nrow(iris)))
      new_mtcars <- transform(mtcars, id = seq_len(nrow(mtcars)))
    "
  ),
  modules = modules(
    module(
      label = "data source",
      server = function(input, output, session, data) {},
      ui = function(id, ...) div(p("information about data source")),
      filters = "all"
    ),
    example_module(label = "example teal module"),
    module(
      "Iris Sepal.Length histogram",
      server = function(input, output, session, data) {
        output$hist <- renderPlot(
          hist(data[["new_iris"]]()$Sepal.Length)
        )
      },
      ui = function(id, ...) {
        ns <- NS(id)
        plotOutput(ns("hist"))
      },
      filters = "new_iris"
    )
  ),
  title = "App title"
)
if (interactive()) {
  shinyApp(app$ui, app$server)
}

}
