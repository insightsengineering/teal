% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/init.R
\name{init}
\alias{init}
\title{Create the Server and UI Function For the Shiny App}
\usage{
init(
  data,
  modules,
  title = NULL,
  filter = list(),
  header = tags$p("Add Title Here"),
  footer = tags$p("Add Footer Here"),
  id = character(0)
)
}
\arguments{
\item{data}{(\code{TealData} or \code{TealDataset} or \code{TealDatasetConnector} or \code{list} or \code{data.frame})\cr
\code{R6} object as returned by \code{\link[=cdisc_data]{cdisc_data()}}, \code{\link[=teal_data]{teal_data()}}, \code{\link[=cdisc_dataset]{cdisc_dataset()}}, \code{\link[=dataset]{dataset()}},
\code{\link[=dataset_connector]{dataset_connector()}} or \code{\link[=cdisc_dataset_connector]{cdisc_dataset_connector()}} or a single \code{data.frame} or a list of
the previous objects or function returning a named list.
NOTE: teal does not guarantee reproducibility of the code when names of the list elements
do not match the original object names. To ensure reproducibility please use \code{\link[=teal_data]{teal_data()}}
or \code{\link[=cdisc_data]{cdisc_data()}} with \code{check = TRUE} enabled.}

\item{modules}{(\code{list} or \code{teal_modules})\cr
nested list of \code{teal_modules} or \code{module} objects. See \code{\link[=modules]{modules()}} and \code{\link[=module]{module()}} for
more details.}

\item{title}{(\code{NULL} or \code{character})\cr
The browser window title (defaults to the host URL of the page).}

\item{filter}{(\code{list})\cr
You can define filters that show when the app starts.
The general pattern is:
\code{list(iris = list(Species = ..., Sepal.Length = ...), mtcars = ...)}.
An example is:
\code{list(iris = list(Species = c("setosa", "versicolor")))}.
More generally, the filters for the variable, e.g. \code{Species} can be
specified as follows:
\code{list(Species = c("setosa", "versicolor"))},
\code{list(Species = list(c("setosa", "versicolor"), keep_na = TRUE))},
or equivalently with:
\code{list(Species = c("setosa", "versicolor", NA))},
or for the default filter (not very restrictive):
\code{list(Species = default_filter())}

Instead of \code{choices} above, use the following names:
\itemize{
\item \code{numerical}: \code{range}
\item \code{factor}: \code{choices}
\item \code{logical}: \code{logical}
A general example is:
\code{list( iris = list(Sepal.Length = default_filter(), Species = c("M", NA)), mtcars = list(mpg = default_filter())   )}
Ignored if the app is restored from a bookmarked state.
}}

\item{header}{(\code{character} or \code{shiny.tag}) \cr
the header of the app. Note shiny code placed here (and in the footer
argument) will be placed in the app's \code{ui} function so code which needs to be placed in the \code{ui} function
(such as loading css via \code{\link[htmltools:htmlDependency]{htmltools::htmlDependency()}}) should be included here.}

\item{footer}{(\code{character} or \code{shiny.tag})\cr
the footer of the app}

\item{id}{(\code{character})\cr
module id to embed it, if provided,
the server function must be called with \code{\link[shiny:moduleServer]{shiny::moduleServer()}};
See the vignette for an example. However, \code{\link[=ui_teal_with_splash]{ui_teal_with_splash()}}
is then preferred to this function.}
}
\value{
named list with server and ui function
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#maturing}{\figure{lifecycle-maturing.svg}{options: alt='[Maturing]'}}}{\strong{[Maturing]}}
End-users: This is the most important function for you to start a
teal app that is composed out of teal modules.

\strong{Notes for developers}:
This is a wrapper function around the \code{module_teal.R} functions. Unless you are
an end-user, don't use this function, but instead this module.
}
\examples{
library(scda)

ADSL <- synthetic_cdisc_data("latest")$adsl

options(teal_logging = FALSE)

app <- init(
  data = cdisc_data(
    cdisc_dataset("ADSL", ADSL),
    code = "ADSL <- synthetic_cdisc_data(\"latest\")$adsl"
  ),
  modules = root_modules(
    module(
      "data source",
      server = function(input, output, session, datasets) {},
      ui = function(id, ...) div(p("information about data source")),
      filters = "all"
    ),
    module(
      "ADSL AGE histogram",
      server = function(input, output, session, datasets) {
        output$hist <- renderPlot(
          hist(datasets$get_data("ADSL", filtered = TRUE)$AGE)
        )
      },
      ui = function(id, ...) {
        ns <- NS(id)
        plotOutput(ns("hist"))
      },
      filters = "ADSL"
    )
  ),
  title = "App title",
  filter = list(ADSL = list(AGE = default_filter())),
  header = tags$h1("Sample App"),
  footer = tags$p("Copyright 2017 - 2020")
)
\dontrun{
shinyApp(app$ui, app$server)
# or: to also work with bookmarking
bookmarkableShinyApp(app$ui, app$server)
}

# See the vignette for an example how to embed this app as a module
# into a larger application
}
