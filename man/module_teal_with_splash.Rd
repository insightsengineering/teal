% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/module_teal_with_splash.R
\name{module_teal_with_splash}
\alias{module_teal_with_splash}
\alias{ui_teal_with_splash}
\alias{srv_teal_with_splash}
\title{\code{teal} module integration with splash screen}
\usage{
ui_teal_with_splash(
  id,
  data,
  title = build_app_title(),
  header = tags$p(),
  footer = tags$p()
)

srv_teal_with_splash(id, data, modules, filter = teal_slices())
}
\arguments{
\item{id}{(\code{character(1)})
module id}

\item{data}{(\code{teal_data} or \code{teal_data_module})
\code{teal_data} object as returned by \code{\link[teal.data:teal_data]{teal.data::teal_data()}} or \code{teal_data_module}.}

\item{title}{(\code{shiny.tag} or \code{character(1)})
The browser window title. Defaults to a title "teal app" with the icon of NEST.
Can be created using the \code{build_app_title()} or
by passing a valid \code{shiny.tag} which is a head tag with title and link tag.}

\item{header}{(\code{shiny.tag} or \code{character(1)})
The header of the app.}

\item{footer}{(\code{shiny.tag} or \code{character(1)})
The footer of the app.}

\item{modules}{(\code{teal_modules}) object containing the output modules which
will be displayed in the \code{teal} application. See \code{\link[=modules]{modules()}} and \code{\link[=module]{module()}} for
more details.}

\item{filter}{(\code{teal_slices})
Specification of initial filter. Filters can be specified using \code{\link[=teal_slices]{teal_slices()}}.
Old way of specifying filters through a list is deprecated and will be removed in the
next release. Please fix your applications to use \code{\link[=teal_slices]{teal_slices()}}.}
}
\value{
\code{reactive} containing \code{teal_data} object when data is loaded.
If data is not loaded yet, \code{reactive} returns \code{NULL}.
}
\description{
\ifelse{html}{\href{https://lifecycle.r-lib.org/articles/stages.html#stable}{\figure{lifecycle-stable.svg}{options: alt='[Stable]'}}}{\strong{[Stable]}}

Module offers the dynamic display that switches between a custom splash screen
for delayed data loading and a default splash screen.This helps ensure smooth
user interaction, particularly during the initial heavy data processing or
when querying for a password to fetch data.
}
\details{
\code{\link[=init]{init()}} is a wrapper around this module useful for end-users which
assumes that it is a top-level module and cannot be embedded.
This function instead adheres to the \code{shiny} module conventions.

Please also refer to the doc of \code{\link[=init]{init()}}.
}
\examples{
teal_modules <- modules(example_module())
# Shiny app with modular integration of teal
ui <- fluidPage(
  ui_teal_with_splash(id = "app1", data = teal_data())
)

server <- function(input, output, session) {
  srv_teal_with_splash(
    id = "app1",
    data = teal_data(iris = iris),
    modules = teal_modules
  )
}

if (interactive()) {
  shinyApp(ui, server)
}

}
