name: R CMD Check

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  build-install-check:
    runs-on: ubuntu-latest
    container:
      image: ${{ matrix.config.image }}:${{ matrix.config.tag }}
    name: ${{ matrix.config.image }}, version ${{ matrix.config.tag }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - {image: ghcr.io/insightsengineering/rstudio_4.1.0_bioc_3.13, tag: 'latest'}

    steps:
      - name: Check if Docker image meets requirements
        run: |
          lsb=$(lsb_release -d)
          [[ ! $lsb =~ "Ubuntu" ]] && exit 1

          required_pkgs="r-base curl git"
          for PKG in $required_pkgs
          do {
            DPKG_PAGER=cat dpkg -l $PKG
          }
          done
        shell: bash

      - name: Gather info from PR
        uses: actions/github-script@v4
        id: get-pr
        if: github.event_name == 'pull_request'
        with:
          script: |
            const request = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            }
            core.info(`Getting PR #${request.pull_number} from ${request.owner}/${request.repo}`)
            try {
              const result = await github.pulls.get(request)
              return result.data
            } catch (err) {
              core.setFailed(`Request failed with error ${err}`)
            }

      - name: Install remotes R package if needed
        run: |
           options(repos = c(CRAN = "https://cloud.r-project.org/"))
           ncores <- parallel::detectCores(all.tests = FALSE, logical = TRUE)
           cat(paste("\n\nnumber of cores detected:", ncores, "\n\n"))
           if (!require("remotes")) install.packages("remotes", upgrade = "never", Ncpus = ncores)
        shell: Rscript {0}
        env:
          GITHUB_PAT: ${{ secrets.REPO_GITHUB_TOKEN }} # or ${{ secrets.GITHUB_TOKEN }}


      - name: Checkout repo during PR
        uses: actions/checkout@v2
        if: github.event_name == 'pull_request'
        with:
          repository: ${{ fromJSON(steps.get-pr.outputs.result).head.repo.full_name }}
          ref: ${{ fromJSON(steps.get-pr.outputs.result).head.ref }}
          path: ${{ github.event.repository.name }}

      - name: Checkout repo from push
        uses: actions/checkout@v2
        if: github.event_name == 'push'
        with:
          path: ${{ github.event.repository.name }}

      - name: Print branch name
        run: |
           cd ${{ github.event.repository.name }}
           git branch --show-current
        shell: bash

      - name: Install system dependencies for R package
        run: |
          ubuntu_info <- read.csv("/etc/os-release", sep = "=", header = FALSE)
          v_ubuntu_info <- setNames(ubuntu_info$V2, ubuntu_info$V1)
          if (v_ubuntu_info[['NAME']] != "Ubuntu") stop("only works on ubuntu")
          ubuntu_version <- v_ubuntu_info[['VERSION_ID']]

          sys_deps_for_pkg <- remotes::system_requirements("ubuntu", ubuntu_version, path = "${{ github.event.repository.name }}")

          sys_pgks <- gsub("^apt-get install -y ", "", sys_deps_for_pkg)

          has_pkgs <- vapply(sys_pgks, function(pkg) system2("dpkg", c("-l", pkg), stdout = NULL, stderr = NULL) == 0,  logical(1))

          if (any(!has_pkgs)) {
            system2("apt-get", "update")
            system2("apt-get", c("install", "-y", sys_pgks[!has_pkgs]))
          }
        shell: Rscript {0}


      - name: Install R package dependencies
        run: |
          setwd("${{ github.event.repository.name }}")
          options(repos = c(CRAN = "https://cloud.r-project.org/"))
          ncores <- parallel::detectCores(all.tests = FALSE, logical = TRUE)
          cat(paste("\n\nnumber of cores detected:", ncores, "\n\n"))
          if (file.exists("renv.lock")) {
            renv::restore()
          } else {
            remotes::install_deps(dependencies = TRUE, upgrade = "never", Ncpus = ncores)
          }

          if (file.exists("staged_dependencies.yaml")) {
            cat("\nInstall Staged Dependencies\n\n\n")
            if (!require("staged.dependencies")) remotes::install_github("openpharma/staged.dependencies", ref = "main", Ncpus = ncores)
            cat("\nCalculating Staged Dependency Table...\n\n")
            print(staged.dependencies::dependency_table(), width = 120)
            cat("\n\n")
            staged.dependencies::install_deps(install_project = FALSE, verbose = TRUE)
          }
        shell: Rscript {0}
        env:
          GITHUB_PAT: ${{ secrets.REPO_GITHUB_TOKEN }} # or ${{ secrets.GITHUB_TOKEN }}

      - name: Build R package
        run: |
          R CMD build ${{ github.event.repository.name }}
          echo "PKGBUILD=$(echo *.tar.gz)" >> $GITHUB_ENV
        shell: bash

# TODO: if configurable then --as-cran optionally
      - name: Run R CMD CHECK
        run: R CMD check --no-manual ${{ env.PKGBUILD }}
        shell: bash
        continue-on-error: true
        env:
          TESTING_DEPTH: 1

      - name: Catch warnings in R CMD check output
        id: catch-errors
        run: |
          x <- tail(readLines("${{ github.event.repository.name }}.Rcheck/00check.log"), 1)
          if (!grepl("^Status", x)) stop("No status line found in R CMD check log")
          if (grepl("ERROR", x)) stop("R CMD check has errors")
          if (grepl("WARNING", x)) stop("R CMD check has warnings")
        shell: Rscript {0}

      - name: Upload check results
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.config.tag }}-results
          path: ${{ github.event.repository.name }}.Rcheck/00check.log

      - name: Install R package
        run: R CMD INSTALL ${{ env.PKGBUILD }}
        shell: bash
