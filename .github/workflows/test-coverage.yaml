name: Coverage

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
      - pre-release

jobs:
  test-coverage:
    name: Coverage
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/insightsengineering/rstudio_4.1.0_bioc_3.13:latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Gather info from PR
        uses: actions/github-script@v4
        id: get-pr
        if: github.event_name == 'pull_request'
        with:
          script: |
            const request = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            }
            core.info(`Getting PR #${request.pull_number} from ${request.owner}/${request.repo}`)
            try {
              const result = await github.pulls.get(request)
              return result.data
            } catch (err) {
              core.setFailed(`Request failed with error ${err}`)
            }

      - name: Install remotes R package if needed
        run: |
          options(repos = c(CRAN = "https://cloud.r-project.org/"))
          ncores <- parallel::detectCores(all.tests = FALSE, logical = TRUE)
          cat(paste("\n\nnumber of cores detected:", ncores, "\n\n"))
          if (!require("remotes")) install.packages("remotes", upgrade = "never", Ncpus = ncores)
        shell: Rscript {0}
        env:
          GITHUB_PAT: ${{ secrets.REPO_GITHUB_TOKEN }} # or ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout repo during PR
        uses: actions/checkout@v2
        if: github.event_name == 'pull_request'
        with:
          repository: ${{ fromJSON(steps.get-pr.outputs.result).head.repo.full_name }}
          ref: ${{ fromJSON(steps.get-pr.outputs.result).head.ref }}
          path: ${{ github.event.repository.name }}

      - name: Checkout repo from push
        uses: actions/checkout@v2
        if: github.event_name == 'push'
        with:
          path: ${{ github.event.repository.name }}

      - name: Install system dependencies for R package
        run: |
          ubuntu_info <- read.csv("/etc/os-release", sep = "=", header = FALSE)
          v_ubuntu_info <- setNames(ubuntu_info$V2, ubuntu_info$V1)
          if (v_ubuntu_info[['NAME']] != "Ubuntu") stop("only works on ubuntu")
          ubuntu_version <- v_ubuntu_info[['VERSION_ID']]

          sys_deps_for_pkg <- remotes::system_requirements("ubuntu", ubuntu_version, path = "${{ github.event.repository.name }}")

          sys_pgks <- gsub("^apt-get install -y ", "", sys_deps_for_pkg)

          has_pkgs <- vapply(sys_pgks, function(pkg) system2("dpkg", c("-l", pkg), stdout = NULL, stderr = NULL) == 0,  logical(1))

          if (any(!has_pkgs)) {
            system2("apt-get", "update")
            system2("apt-get", c("install", "-y", sys_pgks[!has_pkgs]))
          }
        shell: Rscript {0}

      - name: Install R package dependencies
        run: |
          setwd("${{ github.event.repository.name }}")
          options(repos = c(CRAN = "https://cloud.r-project.org/"))
          ncores <- parallel::detectCores(all.tests = FALSE, logical = TRUE)
          cat(paste("\n\nnumber of cores detected:", ncores, "\n\n"))
          if (file.exists("renv.lock")) {
            renv::restore()
          } else {
            remotes::install_deps(dependencies = TRUE, upgrade = "never", Ncpus = ncores)
          }
          if (file.exists("staged_dependencies.yaml")) {
            cat("\nInstall Staged Dependencies\n\n\n")
            if (!require("staged.dependencies")) {
              remotes::install_github("openpharma/staged.dependencies", ref = "v0.2.1", Ncpus = ncores, upgrade = "never")
            }
            cat("\nCalculating Staged Dependency Table...\n\n")
            x <- staged.dependencies::dependency_table()
            print(x, width = 120)
            cat("\n\n")
            staged.dependencies::install_deps(dep_structure = x, install_project = FALSE, verbose = TRUE)
          }
        shell: Rscript {0}
        env:
          GITHUB_PAT: ${{ secrets.REPO_GITHUB_TOKEN }}

      - name: Install R package
        run: R CMD INSTALL ${{ github.event.repository.name }}
        shell: bash

      - name: Install covr
        run: if (!require("covr")) install.packages("covr", repos="http://cran.rstudio.com/", upgrade = "never")
        shell: Rscript {0}

      - name: Run coverage
        run: |
          x <- covr::package_coverage()
          print(x)
          covr::to_cobertura(x, filename = "coverage.xml")
          p <- covr::percent_coverage(x)
          cat(p, file="coverage.txt", sep="")
          covr::report(
            x,
            file = "coverage-report.html",
            browse = FALSE
          )
        shell: Rscript {0}

      - name: cobertura-report
        uses: 5monkeys/cobertura-action@v9
        with:
          path: coverage.xml
          repo_token: ${{ secrets.REPO_GITHUB_TOKEN }}
          minimum_coverage: 80
          fail_below_threshold: false
          skip_covered: true

      - name: Set env
        run: echo "OVERALL_COVERAGE=$(cat coverage.txt)" >> $GITHUB_ENV

      - name: Badge for coverage
        uses: knightdave/anybadge-action@v1.1.0
        with:
          file: coverage.svg
          value: ${{ env.OVERALL_COVERAGE }}
          anybadge_args: coverage

      - name: Upload badge
        uses: actions/upload-artifact@v2
        with:
          name: coverage
          path: coverage.svg

      - name: Upload report
        uses: actions/upload-artifact@v2
        with:
          name: coverage-report
          path: "coverage-report.html"
