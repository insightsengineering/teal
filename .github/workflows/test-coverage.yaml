name: Coverage

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
      - pre-release

jobs:
  test-coverage:
    name: Coverage
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/insightsengineering/rstudio_4.1.0_bioc_3.13:latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Gather info from PR
        uses: actions/github-script@v5
        id: get-pr
        if: github.event_name == 'pull_request'
        with:
          script: |
            const request = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            }
            core.info(`Getting PR #${request.pull_number} from ${request.owner}/${request.repo}`)
            try {
              const result = await github.rest.pulls.get(request)
              return result.data
            } catch (err) {
              core.setFailed(`Request failed with error ${err}`)
            }

      - name: Checkout repo during PR
        uses: actions/checkout@v2
        if: github.event_name == 'pull_request'
        with:
          repository: ${{ fromJSON(steps.get-pr.outputs.result).head.repo.full_name }}
          ref: ${{ fromJSON(steps.get-pr.outputs.result).head.ref }}
          path: ${{ github.event.repository.name }}

      - name: Checkout repo from push
        uses: actions/checkout@v2
        if: github.event_name == 'push'
        with:
          path: ${{ github.event.repository.name }}

      - name: Run Staged dependencies
        uses: insightsengineering/staged-dependencies-action@v1
        env:
          GITHUB_PAT: ${{ secrets.REPO_GITHUB_TOKEN }}
          SD_REPO_PATH: ${{ github.event.repository.name }}
          SD_ENABLE_CHECK: "false"

      - name: Install R package
        run: R CMD INSTALL ${{ github.event.repository.name }}
        shell: bash

      - name: Install covr
        run: if (!require("covr")) install.packages("covr", repos="http://cran.rstudio.com/", upgrade = "never")
        shell: Rscript {0}

      - name: Run coverage
        run: |
          tryCatch(
            expr = {
                x <- covr::package_coverage()
                print(x)
                covr::to_cobertura(x, filename = "coverage.xml")
                p <- covr::percent_coverage(x)
                cat(p, file = "coverage.txt", sep = "")
                covr::report(
                    x,
                    file = "coverage-report.html",
                    browse = FALSE
                )
            },
            error = function(e) {
                message("Errors generated during coverage analysis:")
                print(e)
            },
            warning = function(w) {
                message("Warnings generated during coverage analysis:")
                print(w)
            }
          )
        shell: Rscript {0}

      - name: Check whether coverage reports exists
        id: check_coverage_reports
        uses: andstor/file-existence-action@v1
        with:
          files: "coverage.xml, coverage.txt, coverage-report.html"

      - name: cobertura-report
        if: steps.check_coverage_reports.outputs.files_exists == 'true'
        uses: 5monkeys/cobertura-action@v9
        with:
          path: coverage.xml
          repo_token: ${{ secrets.REPO_GITHUB_TOKEN }}
          minimum_coverage: 80
          fail_below_threshold: false
          skip_covered: true

      - name: Set env
        if: steps.check_coverage_reports.outputs.files_exists == 'true'
        run: echo "OVERALL_COVERAGE=$(cat coverage.txt)" >> $GITHUB_ENV

      - name: Badge for coverage
        if: steps.check_coverage_reports.outputs.files_exists == 'true'
        uses: knightdave/anybadge-action@v1.1.0
        with:
          file: coverage.svg
          value: ${{ env.OVERALL_COVERAGE }}
          anybadge_args: coverage

      - name: Upload badge
        if: steps.check_coverage_reports.outputs.files_exists == 'true'
        uses: actions/upload-artifact@v2
        with:
          name: coverage
          path: coverage.svg

      - name: Upload report
        if: steps.check_coverage_reports.outputs.files_exists == 'true'
        uses: actions/upload-artifact@v2
        with:
          name: coverage-report
          path: "coverage-report.html"
